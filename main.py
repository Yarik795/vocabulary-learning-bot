"""
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Telegram-–±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö —Å–ª–æ–≤
"""

import logging
import asyncio
import sys
import os
from pathlib import Path
from logging.handlers import RotatingFileHandler

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–î–ò–†–û–í–ö–ò –î–õ–Ø WINDOWS
# ============================================================================
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å Windows
if sys.platform == "win32":
    os.environ["PYTHONIOENCODING"] = "utf-8"
    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UTF-8 –¥–ª—è stdout (Python 3.7+)
    try:
        import io
        sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
        sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')
    except Exception:
        pass  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ

from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.fsm.storage.memory import MemoryStorage

from config.settings import (
    TELEGRAM_BOT_TOKEN, 
    DATA_DIR, 
    AUDIO_CACHE_DIR, 
    VARIANTS_CACHE_DIR,
    LOGS_DIR,
    LOG_FILE,
    LOG_LEVEL,
    LOG_FORMAT,
    CLEAR_LOGS_ON_START,
    MAX_LOG_SIZE,
    MAX_LOG_BACKUPS
)
from src.bot.handlers import router as handlers_router
from src.bot.handlers.tts_test_handler import init_tts_test_handler
from src.services.openrouter_client import OpenRouterClient
from src.services.tts_service import TTSService


# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# ============================================================================

def clear_log_file():
    """
    –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (—É–¥–æ–±–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞, –±–µ–∑ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    if LOG_FILE.exists():
        try:
            LOG_FILE.unlink()  # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            print(f"üßπ –§–∞–π–ª –ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω: {LOG_FILE}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏: {e}")


def setup_logging():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∏
    
    –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
    - CLEAR_LOGS_ON_START=true (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): –õ–æ–≥–∏ –æ—á–∏—â–∞—é—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    - CLEAR_LOGS_ON_START=false: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è RotatingFileHandler –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
    """
    # üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if CLEAR_LOGS_ON_START:
        clear_log_file()
    
    # ============================================================================
    # –í–´–ë–û–† HANDLER'–∞: —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∏–ª–∏ –±–µ–∑
    # ============================================================================
    
    if CLEAR_LOGS_ON_START:
        # üìù –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –ø—Ä–æ—Å—Ç–æ–π FileHandler
        file_handler = logging.FileHandler(LOG_FILE, encoding="utf-8")
    else:
        # üîÑ –ü—Ä–æ–¥–∞–∫—à–µ–Ω: RotatingFileHandler —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π
        # –ö–æ–≥–¥–∞ —Ñ–∞–π–ª –¥–æ—Å—Ç–∏–≥–∞–µ—Ç MAX_LOG_SIZE, –æ–Ω –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –≤ .1, .2, .3 –∏ —Ç.–¥.
        file_handler = RotatingFileHandler(
            LOG_FILE,
            maxBytes=MAX_LOG_SIZE,        # –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (10 MB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            backupCount=MAX_LOG_BACKUPS,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ backup —Ñ–∞–π–ª–æ–≤ (5 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            encoding="utf-8"
        )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=getattr(logging, LOG_LEVEL),
        format=LOG_FORMAT,
        handlers=[
            file_handler,
            logging.StreamHandler()
        ]
    )
    
    # –õ–æ–≥–≥–µ—Ä –¥–ª—è aiogram (—á—É—Ç—å –º–µ–Ω–µ–µ verbose)
    logging.getLogger("aiogram").setLevel(logging.WARNING)
    
    logger = logging.getLogger(__name__)
    logger.info("=" * 60)
    logger.info("ü§ñ Telegram Bot –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö —Å–ª–æ–≤")
    logger.info("=" * 60)
    logger.info(f"üìÅ –õ–æ–≥–∏ –ø–∏—à—É—Ç—Å—è –≤: {LOG_FILE}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if CLEAR_LOGS_ON_START:
        logger.info("üßπ –†–µ–∂–∏–º –†–ê–ó–†–ê–ë–û–¢–ö–ò: –ª–æ–≥–∏ –æ—á–∏—â–∞—é—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")
    else:
        logger.info(f"üîÑ –†–µ–∂–∏–º –ü–†–û–î–ê–ö–®–ï–ù–ê: —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ (max {MAX_LOG_SIZE} –±–∞–π—Ç, backup: {MAX_LOG_BACKUPS})")
    
    return logger


# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ê–ü–û–ö
# ============================================================================

def init_directories():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    logger = logging.getLogger(__name__)
    
    directories = [
        DATA_DIR,
        AUDIO_CACHE_DIR,
        VARIANTS_CACHE_DIR,
        LOGS_DIR,
    ]
    
    for directory in directories:
        directory.mkdir(parents=True, exist_ok=True)
        logger.info(f"‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {directory}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    from src.utils.file_helpers import cleanup_expired_sessions, TEMP_SESSIONS_DIR
    TEMP_SESSIONS_DIR.mkdir(parents=True, exist_ok=True)
    logger.info(f"‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {TEMP_SESSIONS_DIR}")
    
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    deleted = cleanup_expired_sessions()
    if deleted > 0:
        logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted} –∏—Å—Ç—ë–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")


# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê
# ============================================================================

async def set_default_commands(bot: Bot):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –≤ Telegram
    """
    commands = [
        BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
        BotCommand(command="menu", description="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand(command="test_tts", description="–¢–µ—Å—Ç TTS (–æ–∑–≤—É—á–∫–∞ —Å–ª–æ–≤–∞)"),
        BotCommand(command="tts_cache_info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –∞—É–¥–∏–æ"),
        BotCommand(command="clear_tts_cache", description="–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∞—É–¥–∏–æ"),
    ]
    
    await bot.set_my_commands(
        commands=commands,
        scope=BotCommandScopeDefault()
    )


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    """
    logger = logging.getLogger(__name__)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    
    logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    logger.info(f"üîë –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {TELEGRAM_BOT_TOKEN[:10]}...")
    
    # ============================================================================
    # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–†–í–ò–°–û–í
    # ============================================================================
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenRouter –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    openrouter_client = OpenRouterClient()
    logger.info("‚úÖ OpenRouter –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
    tts_service = TTSService()
    logger.info("‚úÖ TTS —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è TTS test handler —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–µ—Ä–≤–∏—Å–∞
    init_tts_test_handler(tts_service)
    logger.info("‚úÖ TTS test handler –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
    dp.include_router(handlers_router)
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    await set_default_commands(bot)
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    try:
        me = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username} (ID: {me.id})")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
        raise
    
    # –ó–∞–ø—É—Å–∫ polling (–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
    logger.info("üöÄ –ù–∞—á–∞–ª–æ polling... –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("=" * 60)
    
    try:
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types()
        )
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        await bot.session.close()
        logger.info("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")


# ============================================================================
# –¢–û–ß–ö–ê –í–•–û–î–ê
# ============================================================================

if __name__ == "__main__":
    # ‚ö†Ô∏è –í–ê–ñ–ù–û: –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –ª–æ–≥–æ–≤ –î–û –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    # FileHandler –Ω–µ —Å–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤—Ä—É—á–Ω—É—é
    from pathlib import Path
    LOGS_DIR = Path(__file__).parent / "logs"
    LOGS_DIR.mkdir(parents=True, exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫
    logger.info("üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫...")
    init_directories()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise
