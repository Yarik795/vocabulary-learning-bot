"""
Все промпты для бота в одном месте для быстрой итерации и A/B тестирования
"""

import json
from typing import List

# ============================================================================
# ПРОМПТ ДЛЯ РАСПОЗНАВАНИЯ ТЕКСТА С ИЗОБРАЖЕНИЯ
# ============================================================================

VISION_PROMPT = """Это фотография со списком словарных слов русского языка.

⚠️ ВАЖНО: Распознавай ТОЛЬКО ОДИН основной список слов!

Твоя задача:
1. Найди ГЛАВНЫЙ список слов на изображении (обычно 5-15 слов)
2. Выдай ТОЛЬКО слова из этого списка - по одному на строке
3. Игнорируй ВСЕ остальное: другие списки, таблицы, сноски, описания, номера
4. Если видишь описание или фразу - выдели ТОЛЬКО отдельные словарные слова
5. Удали дубликаты

⛔ СТОП-СИГНАЛЫ (если видишь это - что-то не так):
- Более 15 слов = ты распознаёшь неправильно (таблица или словарь)
- Похожие слова подряд = игнорируй, это таблица

Возвращай ТОЛЬКО слова основного списка, по одному на строке. Больше ничего."""

# ============================================================================
# СИСТЕМНЫЙ ПРОМПТ ДЛЯ ГЕНЕРАЦИИ ВАРИАНТОВ
# ============================================================================

VARIANT_GENERATION_SYSTEM_PROMPT = """Ты — эксперт по русским словарным словам и типичным орфографическим ошибкам школьников.

Твоя задача — генерировать реалистичные неправильные варианты написания слов для обучающего теста.

КРИТИЧЕСКИ ВАЖНО:
- Варианты должны быть МАКСИМАЛЬНО ПОХОЖИ на правильное написание
- Варианты должны отражать РЕАЛЬНЫЕ ошибки, которые делают школьники
- Варианты должны быть ТРУДНООТЛИЧИМЫ от правильного написания
- НЕ создавай очевидно бредовые варианты (удвоение первой буквы, добавление мягкого знака в конец и т.д.)

Типы реалистичных ошибок в русских словарных словах:
1. Безударные гласные: о→а, е→и, я→е, и→е (самая частая ошибка!)
   Пример: "корова" → "карова" (НЕ "коррова", НЕ "ккорова")
   
2. Парные согласные: д→т, б→п, г→к, в→ф, ж→ш, з→с
   Пример: "медведь" → "метведь" (НЕ "медведдь", НЕ "ммедведь")
   
3. Удвоение согласных: пропуск или добавление второй согласной (ТОЛЬКО если это логично)
   Пример: "класс" → "клас" (НЕ "кклас", НЕ "классс")
   
4. Непроизносимые согласные: пропуск буквы
   Пример: "солнце" → "сонце" (НЕ "соллнце", НЕ "ссолнце")
   
5. Мягкий знак: пропуск или неправильное место
   Пример: "письмо" → "писмо" (НЕ "письмоь", НЕ "ппись мо")

ЗАПРЕЩЕНО:
- Удвоение первой буквы слова (ппраздник, ввчера, ккорова)
- Добавление мягкого/твёрдого знака в конец слова без причины
- Добавление лишних букв в конец (погодаа, вчераа)
- Замена на латинские или другие не-русские буквы
- Создание вариантов, которые не похожи на слово фонетически

ЦЕЛЬ: Создать варианты, которые РЕАЛЬНО могут запутать ученика!"""

# ============================================================================
# BATCH-ПРОМПТ ДЛЯ ГЕНЕРАЦИИ ВАРИАНТОВ (основной)
# ============================================================================

VARIANT_GENERATION_BATCH_PROMPT_TEMPLATE = """Сгенерируй неправильные варианты написания для списка словарных слов.

Словарные слова: {words_list}

Требования для КАЖДОГО слова:
- Сгенерируй РОВНО 3 неправильных варианта
- Каждый вариант должен быть МАКСИМАЛЬНО ПОХОЖ на правильное написание
- Варианты должны отражать ТИПИЧНЫЕ ошибки школьников (безударные гласные, парные согласные, непроизносимые согласные)
- Варианты должны быть ТРУДНООТЛИЧИМЫ от правильного - ученик должен задуматься!

Примеры ХОРОШИХ вариантов:
- "корова" → ["карова", "корава", "кoрова"] (замена о→а, фонетически похожие)
- "праздник" → ["празник", "празднек", "праздник"] (пропуск д, замена и→е)
- "вчера" → ["вчира", "вчера", "вчира"] (замена е→и, фонетически)
- "берёза" → ["береза", "бириза", "берёса"] (замена ё→е, е→и, з→с)

Примеры ПЛОХИХ вариантов (НЕ делай так):
- "корова" → ["ккорова", "коровва", "короваа"] (удвоение первой буквы, добавление в конец)
- "праздник" → ["ппраздник", "праздникь", "праздниик"] (удвоение первой, мягкий знак в конце)
- "вчера" → ["ввчера", "вччера", "вчераа"] (удвоение согласных, добавление в конец)

Верни ответ ТОЛЬКО в формате JSON без дополнительного текста.
Структура: словарь, где ключ - правильное слово, значение - массив из 3 вариантов.

Пример формата:
{
  "корова": ["карова", "корава", "кoрова"],
  "берёза": ["береза", "бириза", "берёса"],
  "праздник": ["празник", "празднек", "праздник"]
}

Каждый вариант должен:
- Отличаться от правильного написания
- Быть уникальным в рамках слова
- Звучать похоже на правильное слово
- Представлять реалистичную ошибку школьника
- НЕ содержать удвоения первой буквы
- НЕ содержать бессмысленных добавлений букв в конец"""

# ============================================================================
# FALLBACK ПРОМПТ ДЛЯ ОДНОГО СЛОВА
# ============================================================================

VARIANT_GENERATION_SINGLE_PROMPT_TEMPLATE = """Сгенерируй неправильные варианты написания для словарного слова: "{word}"

Требования:
- Сгенерируй РОВНО 3 неправильных варианта
- Каждый вариант должен быть МАКСИМАЛЬНО ПОХОЖ на правильное написание
- Варианты должны отражать ТИПИЧНЫЕ ошибки школьников
- Варианты должны быть ТРУДНООТЛИЧИМЫ от правильного

Примеры хороших вариантов:
- "корова" → ["карова", "корава", "кoрова"]
- "праздник" → ["празник", "празднек", "праздник"]

НЕ делай:
- Удвоение первой буквы (ккорова)
- Добавление букв в конец (короваа)
- Бессмысленные изменения (коррова)

Формат JSON:
["вариант1", "вариант2", "вариант3"]

Только JSON, ничего больше."""

# ============================================================================
# ФУНКЦИИ ДЛЯ ПОДСТАНОВКИ ПЕРЕМЕННЫХ
# ============================================================================


def get_variant_generation_batch_prompt(words_list: List[str]) -> str:
    """
    Получить batch-промпт для генерации вариантов для списка слов
    
    Args:
        words_list: Список слов для генерации вариантов
        
    Returns:
        Отформатированный промпт со списком слов
    """
    return VARIANT_GENERATION_BATCH_PROMPT_TEMPLATE.format(
        words_list=json.dumps(words_list, ensure_ascii=False)
    )


def get_variant_generation_single_prompt(word: str) -> str:
    """
    Получить fallback промпт для генерации вариантов одного слова
    
    Args:
        word: Слово для генерации вариантов
        
    Returns:
        Отформатированный промпт
    """
    return VARIANT_GENERATION_SINGLE_PROMPT_TEMPLATE.format(word=word)
