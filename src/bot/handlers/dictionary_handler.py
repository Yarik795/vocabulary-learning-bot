"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è–º–∏ –≤ Telegram –±–æ—Ç–µ
–§—É–Ω–∫—Ü–∏–∏: –ø—Ä–æ—Å–º–æ—Ç—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π
"""

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from src.core.dictionary_manager import DictionaryManager
from aiogram.fsm.context import FSMContext
from src.bot.states import DictionaryStates
from src.utils.validators import clean_words_list

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–ª–æ–≤–∞—Ä–µ–π
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–ª–æ–≤–∞—Ä–µ–π
dict_manager = DictionaryManager()


# ============================================================================
# –ü–†–û–°–ú–û–¢–† –°–ü–ò–°–ö–ê –°–õ–û–í–ê–†–ï–ô
# ============================================================================

async def show_dictionaries(user_id: int, message_or_callback, is_callback: bool = False):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_or_callback: Message –∏–ª–∏ CallbackQuery –æ–±—ä–µ–∫—Ç
        is_callback: True –µ—Å–ª–∏ CallbackQuery, False –µ—Å–ª–∏ Message
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        dictionaries = dict_manager.list_dictionaries(user_id)
        
        if not dictionaries:
            text = """üìö **–ú–æ–∏ —Å–ª–æ–≤–∞—Ä–∏**

–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤–∞—Ä–µ–π.

–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—ã–π —Å–ª–æ–≤–∞—Ä—å:
1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤
2Ô∏è‚É£ –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞–º —Ç–µ–∫—Å—Ç
3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
4Ô∏è‚É£ –°–ª–æ–≤–∞—Ä—å –≥–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é!

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üìö –°–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
            
            if is_callback:
                await message_or_callback.message.edit_text(text, parse_mode="Markdown")
            else:
                await message_or_callback.answer(text, parse_mode="Markdown")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ–π
        text = f"üìö **–ú–æ–∏ —Å–ª–æ–≤–∞—Ä–∏** ({len(dictionaries)} —à—Ç.)\n\n"
        
        for i, dictionary in enumerate(dictionaries, 1):
            word_count = len(dictionary.words)
            status = "‚úÖ –í—ã—É—á–µ–Ω–æ" if dictionary.is_fully_learned else f"üìñ {word_count} —Å–ª–æ–≤"
            created_date = dictionary.created_at.strftime("%d.%m.%y")
            
            text += f"{i}. **{dictionary.name}**\n"
            text += f"   {status} | –°–æ–∑–¥–∞–Ω: {created_date}\n\n"
        
        # –°–æ–∑–¥–∞—ë–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞—Ä—è
        keyboard = InlineKeyboardBuilder()
        for dictionary in dictionaries:
            button_text = f"üìñ {dictionary.name} ({len(dictionary.words)} —Å–ª–æ–≤)"
            button_data = f"dict_select:{dictionary.id}"
            keyboard.button(text=button_text, callback_data=button_data)
        
        keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="upload_photo")
        keyboard.button(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")
        keyboard.adjust(1)
        
        if is_callback:
            await message_or_callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard.as_markup())
        else:
            await message_or_callback.answer(text, parse_mode="Markdown", reply_markup=keyboard.as_markup())
        
        logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {len(dictionaries)} —Å–ª–æ–≤–∞—Ä–µ–π")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        if is_callback:
            await message_or_callback.answer(error_text, show_alert=True)
        else:
            await message_or_callback.answer(error_text)


# ============================================================================
# –í–´–ë–û–† –ò –ü–†–û–°–ú–û–¢–† –°–õ–û–í–ê–†–Ø
# ============================================================================

@router.callback_query(F.data.startswith("dict_select:"))
async def callback_select_dictionary(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞—Ä—è –∏–∑ —Å–ø–∏—Å–∫–∞
    """
    user_id = callback.from_user.id
    dict_id = callback.data.split(":")[1]
    
    logger.info(f"üìñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Å–ª–æ–≤–∞—Ä—å {dict_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
        dictionary = dict_manager.get_dictionary(user_id, dict_id)
        if not dictionary:
            await callback.answer("‚ùå –°–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–æ–≤–∞—Ä–µ
        word_count = len(dictionary.words)
        created_date = dictionary.created_at.strftime("%d.%m.%y %H:%M")
        status = "‚úÖ –í—ã—É—á–µ–Ω–æ" if dictionary.is_fully_learned else f"üìñ –í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è"
        
        text = f"""üìñ **{dictionary.name}**

üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {word_count}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}
‚Ä¢ –°–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è: {dictionary.total_sessions}
‚Ä¢ –°–æ–∑–¥–∞–Ω: {created_date}

üî§ **–°–ª–æ–≤–∞:**
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 20 –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)
        words_text = ""
        for i, word in enumerate(dictionary.words[:20], 1):
            words_text += f"{i}. {word}\n"
        
        if len(dictionary.words) > 20:
            words_text += f"... –∏ –µ—â—ë {len(dictionary.words) - 20} —Å–ª–æ–≤"
        
        text += words_text
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = InlineKeyboardBuilder()
        
        if not dictionary.is_fully_learned:
            keyboard.button(text="üéì –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data=f"learning_start:{dict_id}")
        
        keyboard.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"dict_edit:{dict_id}")
        keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"dict_delete_confirm:{dict_id}")
        keyboard.button(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="view_dictionaries")
        keyboard.adjust(1)
        
        await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard.as_markup())
        await callback.answer()
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ª–æ–≤–∞—Ä—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤–∞—Ä—è", show_alert=True)


# ============================================================================
# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–õ–û–í–ê–†–Ø
# ============================================================================

@router.callback_query(F.data.startswith("dict_edit:"))
async def callback_edit_dictionary(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è
    """
    user_id = callback.from_user.id
    dict_id = callback.data.split(":")[1]
    
    logger.info(f"‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å {dict_id}")
    
    try:
        dictionary = dict_manager.get_dictionary(user_id, dict_id)
        if not dictionary:
            await callback.answer("‚ùå –°–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        text = f"""‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è: {dictionary.name}**

–¢–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞ ({len(dictionary.words)} —à—Ç):
```
{chr(10).join(dictionary.words)}
```

**–ö–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:**
1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π —Ç–µ–∫—Å—Ç –≤—ã—à–µ
2Ô∏è‚É£ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ (–æ–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É)
3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
4Ô∏è‚É£ –Ø –æ–±–Ω–æ–≤–ª—é —Å–ª–æ–≤–∞—Ä—å

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 50 —Å–ª–æ–≤
‚Ä¢ –û–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É
‚Ä¢ –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å—ã

–ñ–¥—É —Ç–≤–æ–π –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫!"""
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"dict_select:{dict_id}")
        
        await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard.as_markup())
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.set_state(DictionaryStates.waiting_for_words)
        await state.update_data(dict_id=dict_id, dict_name=dictionary.name)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤–∞—Ä—è", show_alert=True)


@router.message(F.text, ~F.text.startswith("/"))
async def handle_edited_dictionary(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
    """
    user_id = message.from_user.id
    current_state = await state.get_state()
    
    # üîç –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info(f"üì® handle_edited_dictionary –ü–û–õ–£–ß–ò–õ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} | FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if current_state != DictionaryStates.waiting_for_words:
        logger.debug(f"‚è≠Ô∏è  –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç (–æ–∂–∏–¥–∞–µ—Ç—Å—è: waiting_for_words, –ø–æ–ª—É—á–µ–Ω–æ: {current_state}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return  # –≠—Ç–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è, –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –¥—Ä—É–≥–æ–π handler
    
    logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
        data = await state.get_data()
        dict_id = data.get("dict_id")
        dict_name = data.get("dict_name")
        
        logger.info(f"üì¶ FSM –¥–∞–Ω–Ω—ã–µ: dict_id={dict_id}, dict_name={dict_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö FSM
        if not dict_id or not dict_name:
            logger.error(f"‚ùå FSM data –Ω–µ–ø–æ–ª–Ω–∞—è: dict_id={dict_id}, dict_name={dict_name}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ–≤–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            await state.clear()
            return
        
        # –ü–∞—Ä—Å–∏–º —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        words_text = message.text.strip()
        words = [w.strip() for w in words_text.split('\n') if w.strip()]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if len(words) == 0:
            await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π. –û—Ç–ø—Ä–∞–≤—å –º–∏–Ω–∏–º—É–º 1 —Å–ª–æ–≤–æ.")
            return
        
        if len(words) > 50:
            await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ª–æ–≤ ({len(words)}). –ú–∞–∫—Å–∏–º—É–º 50.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å
        cleaned_words = clean_words_list(words)
        
        if dict_manager.update_dictionary(user_id, dict_id, cleaned_words):
            text = f"""‚úÖ **–°–ª–æ–≤–∞—Ä—å –æ–±–Ω–æ–≤–ª—ë–Ω!**

üìñ **{dict_name}**
‚Ä¢ –°–ª–æ–≤: {len(cleaned_words)}

–ß—Ç–æ –¥–∞–ª—å—à–µ?"""
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üìñ –ö —Å–ª–æ–≤–∞—Ä—é", callback_data=f"dict_select:{dict_id}")
            keyboard.button(text="üéì –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data=f"learning_start:{dict_id}")
            keyboard.button(text="üìö –ú–æ–∏ —Å–ª–æ–≤–∞—Ä–∏", callback_data="view_dictionaries")
            keyboard.adjust(1)
            
            await message.answer(text, parse_mode="Markdown", reply_markup=keyboard.as_markup())
            logger.info(f"‚úÖ –°–ª–æ–≤–∞—Ä—å {dict_id} –æ–±–Ω–æ–≤–ª—ë–Ω: {len(cleaned_words)} —Å–ª–æ–≤")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


# ============================================================================
# –£–î–ê–õ–ï–ù–ò–ï –°–õ–û–í–ê–†–Ø
# ============================================================================

@router.callback_query(F.data.startswith("dict_delete_confirm:"))
async def callback_delete_confirm(callback: CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è
    """
    user_id = callback.from_user.id
    dict_id = callback.data.split(":")[1]
    
    logger.info(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è {dict_id}")
    
    try:
        dictionary = dict_manager.get_dictionary(user_id, dict_id)
        if not dictionary:
            await callback.answer("‚ùå –°–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        text = f"""‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**

–¢—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å:
**{dictionary.name}** ({len(dictionary.words)} —Å–ª–æ–≤)

‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–æ!

–¢—ã —É–≤–µ—Ä–µ–Ω?"""
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"dict_delete_execute:{dict_id}")
        keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"dict_select:{dict_id}")
        keyboard.adjust(2)
        
        await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard.as_markup())
        await callback.answer()
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤–∞—Ä—è", show_alert=True)


@router.callback_query(F.data.startswith("dict_delete_execute:"))
async def callback_delete_execute(callback: CallbackQuery):
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è
    """
    user_id = callback.from_user.id
    dict_id = callback.data.split(":")[1]
    
    logger.info(f"üóëÔ∏è –°–ª–æ–≤–∞—Ä—å {dict_id} —É–¥–∞–ª—è–µ—Ç—Å—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
    
    try:
        dictionary = dict_manager.get_dictionary(user_id, dict_id)
        dict_name = dictionary.name if dictionary else "–°–ª–æ–≤–∞—Ä—å"
        
        if dict_manager.delete_dictionary(user_id, dict_id):
            text = f"""‚úÖ **–°–ª–æ–≤–∞—Ä—å —É–¥–∞–ª—ë–Ω**

–°–ª–æ–≤–∞—Ä—å "{dict_name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.

–ß—Ç–æ –¥–∞–ª—å—à–µ?"""
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üìö –ú–æ–∏ —Å–ª–æ–≤–∞—Ä–∏", callback_data="view_dictionaries")
            keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="upload_photo")
            keyboard.button(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")
            keyboard.adjust(1)
            
            await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard.as_markup())
            await callback.answer("‚úÖ –°–ª–æ–≤–∞—Ä—å —É–¥–∞–ª—ë–Ω", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è", show_alert=True)
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è", show_alert=True)


# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ============================================================================

@router.callback_query(F.data == "back_to_menu")
async def callback_back_to_menu(callback: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    user_id = callback.from_user.id
    logger.info(f"üè† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é")
    
    from src.bot.handlers.start_handler import cmd_start
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º fake Message –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å cmd_start
    await cmd_start(callback.message)
    await callback.answer()
