"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –ø—Ä–∏—ë–º –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
"""

import logging
from io import BytesIO
from typing import Dict, Any

from aiogram import Router, F, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

from src.services.vision_service import VisionService
from src.utils.validators import format_words_for_display, validate_words_count
from src.utils.file_helpers import save_user_session, load_user_session, delete_user_session
from src.services.tts_service import TTSService
from src.utils.error_handlers import APIErrorHandler, ImageValidator, EdgeCaseHandler


logger = logging.getLogger(__name__)

router = Router(name="photo_router")

logger.info("‚úÖ Router —Ñ–æ—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–¢–û–ì–†–ê–§–ò–ô (–∫–∞–∫ PHOTO)
# ============================================================================

@router.message(F.photo)
async def handle_photo(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å–æ —Å–ª–æ–≤–∞–º–∏
    """
    user_id = message.from_user.id
    logger.info(f"üì∏ PHOTO HANDLER TRIGGERED! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ (—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω)")
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    try:
        processing_msg = await message.answer("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Å–ª–æ–≤–∞...")
        logger.debug(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–†–∞—Å–ø–æ–∑–Ω–∞—é...'")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        processing_msg = None
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—Ñ–∞–π–ª —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º)
        photo = message.photo[-1]
        logger.debug(f"üì∑ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ: file_id={photo.file_id}")
        
        file_info = await message.bot.get_file(photo.file_id)
        logger.debug(f"üì• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –ø–æ–ª—É—á–µ–Ω–∞: —Ä–∞–∑–º–µ—Ä={file_info.file_size} –±–∞–π—Ç, –ø—É—Ç—å={file_info.file_path}")
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        logger.debug(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ ({file_info.file_size} –±–∞–π—Ç)...")
        file_bytesio = await message.bot.download_file(file_info.file_path)
        
        # –ß—Ç–µ–Ω–∏–µ –≤ BytesIO
        image_bytes = file_bytesio.getvalue() if hasattr(file_bytesio, 'getvalue') else file_bytesio
        logger.debug(f"‚úÖ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ ({len(image_bytes)} –±–∞–π—Ç)")
        
        # === –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê –§–ê–ô–õ–ê (–≠—Ç–∞–ø 8) ===
        is_valid, error_msg = ImageValidator.validate_image_size(len(image_bytes), max_size_mb=10)
        if not is_valid:
            if processing_msg:
                await processing_msg.delete()
            await message.answer(error_msg)
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vision —Å–µ—Ä–≤–∏—Å–∞
        vision_service = VisionService()
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
        words = await vision_service.recognize_text(image_bytes)
        
        # === –ö–ê–ü–ò–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–í–´–• –ë–£–ö–í –°–õ–û–í ===
        words = [word.capitalize() if word else word for word in words]
        logger.debug(f"‚úÖ –°–ª–æ–≤–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # === –ü–†–û–í–ï–†–ö–ê –ö–û–õ–ò–ß–ï–°–¢–í–ê –°–õ–û–í (–≠—Ç–∞–ø 8) ===
        is_valid, error_msg = EdgeCaseHandler.validate_words_count(words, max_words=50, min_words=1)
        if not is_valid:
            if processing_msg:
                await processing_msg.delete()
            await message.answer(
                error_msg + "\n\n"
                "üìù **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**\n"
                "–°–æ–∑–¥–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤–∞—Ä–µ–π –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.\n"
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ —É—á–∏—Ç—å —Å–ª–æ–≤–∞! üìö"
            , parse_mode="Markdown")
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ JSON —Ñ–∞–π–ª)
        session_data: Dict[str, Any] = {"words": words}
        if save_user_session(user_id, session_data):
            logger.info(f"üíæ –°–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞
        display_text = format_words_for_display(words)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="words_confirm")
            ]
        ])
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–†–∞—Å–ø–æ–∑–Ω–∞—é..."
        if processing_msg:
            await processing_msg.delete()
            logger.debug(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–†–∞—Å–ø–æ–∑–Ω–∞—é...'")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await message.answer(display_text, reply_markup=keyboard)
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except ValueError as e:
        # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        if processing_msg:
            await processing_msg.delete()
            logger.debug(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–†–∞—Å–ø–æ–∑–Ω–∞—é...'")
        
        error_text = str(e)
        if "‚ùå" not in error_text:
            error_text = f"‚ùå {error_text}"
        
        await message.answer(
            error_text + "\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ\n"
            "‚Ä¢ –õ—É—á—à–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
            "‚Ä¢ –§–æ—Ç–æ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤ (–Ω–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏)",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}", exc_info=True)
        if processing_msg:
            await processing_msg.delete()
            logger.debug(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–†–∞—Å–ø–æ–∑–Ω–∞—é...'")
        
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
        )


# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–û–ö–£–ú–ï–ù–¢–û–í - –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô (–∫–∞–∫ DOCUMENT)
# ============================================================================

@router.message(F.document)
async def handle_document(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    mime_type = message.document.mime_type if message.document else None
    logger.info(f"üìÑ DOCUMENT –ø–æ–ª—É—á–µ–Ω –æ—Ç {user_id}, mime_type: {mime_type}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPEG, PNG, WebP –∏ —Ç.–¥.)
    if mime_type and mime_type.startswith("image/"):
        logger.info(f"üñºÔ∏è –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –û–±—Ä–∞–±–æ—Ç–∞—é –∫–∞–∫ —Ñ–æ—Ç–æ...")
        
        # –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
        await handle_photo_from_document(message)
    else:
        logger.warning(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {mime_type}")
        await message.answer(
            "‚ùå –≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤ (JPG, PNG –∏ —Ç.–¥.)"
        )


async def handle_photo_from_document(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ø—Ä–∏—à–µ–¥—à–µ–π –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    """
    user_id = message.from_user.id
    logger.info(f"üì∏ PHOTO FROM DOCUMENT HANDLER TRIGGERED! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç")
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    try:
        processing_msg = await message.answer("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Å–ª–æ–≤–∞...")
        logger.debug(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–†–∞—Å–ø–æ–∑–Ω–∞—é...'")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        processing_msg = None
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—Ñ–∞–π–ª —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º)
        photo = message.document
        logger.debug(f"üì∑ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ: file_id={photo.file_id}")
        
        file_info = await message.bot.get_file(photo.file_id)
        logger.debug(f"üì• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –ø–æ–ª—É—á–µ–Ω–∞: —Ä–∞–∑–º–µ—Ä={file_info.file_size} –±–∞–π—Ç, –ø—É—Ç—å={file_info.file_path}")
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        logger.debug(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ ({file_info.file_size} –±–∞–π—Ç)...")
        file_bytesio = await message.bot.download_file(file_info.file_path)
        
        # –ß—Ç–µ–Ω–∏–µ –≤ BytesIO
        image_bytes = file_bytesio.getvalue() if hasattr(file_bytesio, 'getvalue') else file_bytesio
        logger.debug(f"‚úÖ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ ({len(image_bytes)} –±–∞–π—Ç)")
        
        # === –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê –§–ê–ô–õ–ê (–≠—Ç–∞–ø 8) ===
        is_valid, error_msg = ImageValidator.validate_image_size(len(image_bytes), max_size_mb=10)
        if not is_valid:
            if processing_msg:
                await processing_msg.delete()
            await message.answer(error_msg)
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vision —Å–µ—Ä–≤–∏—Å–∞
        vision_service = VisionService()
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
        words = await vision_service.recognize_text(image_bytes)
        
        # === –ö–ê–ü–ò–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–í–´–• –ë–£–ö–í –°–õ–û–í ===
        words = [word.capitalize() if word else word for word in words]
        logger.debug(f"‚úÖ –°–ª–æ–≤–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # === –ü–†–û–í–ï–†–ö–ê –ö–û–õ–ò–ß–ï–°–¢–í–ê –°–õ–û–í (–≠—Ç–∞–ø 8) ===
        is_valid, error_msg = EdgeCaseHandler.validate_words_count(words, max_words=50, min_words=1)
        if not is_valid:
            if processing_msg:
                await processing_msg.delete()
            await message.answer(
                error_msg + "\n\n"
                "üìù **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**\n"
                "–°–æ–∑–¥–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤–∞—Ä–µ–π –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.\n"
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ —É—á–∏—Ç—å —Å–ª–æ–≤–∞! üìö"
            , parse_mode="Markdown")
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ JSON —Ñ–∞–π–ª)
        session_data: Dict[str, Any] = {"words": words}
        if save_user_session(user_id, session_data):
            logger.info(f"üíæ –°–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞
        display_text = format_words_for_display(words)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="words_confirm")
            ]
        ])
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–†–∞—Å–ø–æ–∑–Ω–∞—é..."
        if processing_msg:
            await processing_msg.delete()
            logger.debug(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–†–∞—Å–ø–æ–∑–Ω–∞—é...'")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await message.answer(display_text, reply_markup=keyboard)
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except ValueError as e:
        # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        if processing_msg:
            await processing_msg.delete()
            logger.debug(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–†–∞—Å–ø–æ–∑–Ω–∞—é...'")
        
        error_text = str(e)
        if "‚ùå" not in error_text:
            error_text = f"‚ùå {error_text}"
        
        await message.answer(
            error_text + "\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ\n"
            "‚Ä¢ –õ—É—á—à–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
            "‚Ä¢ –§–æ—Ç–æ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤ (–Ω–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏)",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}", exc_info=True)
        if processing_msg:
            await processing_msg.delete()
            logger.debug(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–†–∞—Å–ø–æ–∑–Ω–∞—é...'")
        
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
        )


# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–ì–û–¢–û–í–û"
# ============================================================================

@router.callback_query(F.data == "words_confirm")
async def confirm_words(callback: types.CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ (–∫–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ")
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    """
    user_id = callback.from_user.id
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ —Å–µ—Å—Å–∏–∏ (–∏–∑ JSON —Ñ–∞–π–ª–∞)
    session_data = load_user_session(user_id)
    if session_data is None:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑.", show_alert=True)
        return
    
    words = session_data.get("words", [])
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, msg = validate_words_count(words)
    if not is_valid:
        await callback.answer(msg, show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    await callback.message.edit_text(
        f"‚úÖ <b>–°–ª–æ–≤–∞—Ä—å –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
        f"üìö –°–ª–æ–≤: {len(words)}\n"
        f"üìù –ü–µ—Ä–≤—ã–µ 3: {', '.join(words[:3])}\n\n"
        f"‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è {len(words)} —Å–ª–æ–≤...",
        parse_mode="HTML"
    )
    
    try:
        # === –≠–¢–ê–ü 2: BATCH-–ì–ï–ù–ï–†–ê–¶–ò–Ø –í–ê–†–ò–ê–ù–¢–û–í ===
        from src.services.variant_generator_service import VariantGeneratorService
        from src.core.dictionary_manager import DictionaryManager
        
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        variant_generator = VariantGeneratorService()
        
        # Batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–≤
        all_variants = await variant_generator.generate_variants_batch(words)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not all_variants:
            logger.error(f"‚ùå Batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        missing_variants = [w for w in words if w not in all_variants]
        success_count = len(all_variants)
        
        if missing_variants:
            logger.warning(f"‚ö†Ô∏è –î–ª—è {len(missing_variants)} —Å–ª–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã: {missing_variants}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            await callback.answer(
                f"‚ö†Ô∏è –î–ª—è {len(missing_variants)} —Å–ª–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã. "
                f"–û–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è {success_count} —Å–ª–æ–≤.",
                show_alert=False
            )
        
        logger.info(f"‚úÖ Batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–ª—É—á–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è {success_count} —Å–ª–æ–≤")
        
        # === –≠–¢–ê–ü 3: BATCH-–ì–ï–ù–ï–†–ê–¶–ò–Ø –ê–£–î–ò–û ===
        tts_service = TTSService()
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è {len(words)} —Å–ª–æ–≤...")
        
        try:
            audio_results = await tts_service.batch_generate_audio(words)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ
            successful_audio = sum(1 for word in words if word in audio_results and audio_results[word] is not None)
            failed_audio = len(words) - successful_audio
            
            if successful_audio > 0:
                if failed_audio > 0:
                    logger.warning(f"‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞—É–¥–∏–æ –¥–ª—è {successful_audio}/{len(words)} —Å–ª–æ–≤ (–æ—à–∏–±–∫–∏: {failed_audio})")
                else:
                    logger.info(f"‚úÖ Batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–∞! –í—Å–µ {len(words)} —Å–ª–æ–≤ –≥–æ—Ç–æ–≤—ã")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞—É–¥–∏–æ")
        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞—É–¥–∏–æ")
        
        # === –≠–¢–ê–ü 4: –°–û–ó–î–ê–ù–ò–ï –°–õ–û–í–ê–†–Ø –í –ú–ï–ù–ï–î–ñ–ï–†–ï ===
        dict_manager = DictionaryManager()
        dictionary = dict_manager.create_dictionary(
            user_id=user_id,
            words=words
        )
        
        if not dictionary:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑."
            )
            return
        
        logger.info(f"‚úÖ –°–ª–æ–≤–∞—Ä—å —Å–æ–∑–¥–∞–Ω: ID {dictionary.id}, –Ω–∞–∑–≤–∞–Ω–∏–µ: {dictionary.name}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–∞—Ä–µ
        session_data["variants_generated"] = True
        session_data["variants_count"] = success_count
        session_data["dictionary_id"] = dictionary.id
        session_data["dictionary_name"] = dictionary.name
        save_user_session(user_id, session_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        await callback.message.edit_text(
            f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –°–ª–æ–≤–∞—Ä—å —Å–æ–∑–¥–∞–Ω</b>\n\n"
            f"üìö {dictionary.name}\n"
            f"üìù –í—Å–µ–≥–æ —Å–ª–æ–≤: {len(words)}\n"
            f"‚ú® –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {success_count}/{len(words)}\n\n"
            f"üéì –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìö –ö —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–∞—Ä–µ–π", callback_data="view_dictionaries"),
                    InlineKeyboardButton(text="üéì –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data=f"learning_start:{dictionary.id}")
                ]
            ])
        )
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è
        delete_user_session(user_id)
        logger.info(f"üóëÔ∏è –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è")
        
        logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–ª–æ–≤–∞—Ä—è.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑."
        )
    
    await callback.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!")


# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨"
# ============================================================================

@router.callback_query(F.data == "words_edit")
async def edit_words(callback: types.CallbackQuery):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤
    """
    user_id = callback.from_user.id
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ —Å–µ—Å—Å–∏–∏ (–∏–∑ JSON —Ñ–∞–π–ª–∞)
    session_data = load_user_session(user_id)
    if session_data is None:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.", show_alert=True)
        return
    
    words = session_data.get("words", [])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    words_text = "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞</b>\n\n"
    words_text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É:\n"
    words_text += "(—Å–µ–π—á–∞—Å: " + ", ".join(words[:5])
    if len(words) > 5:
        words_text += f", ... ({len(words)} –≤—Å–µ–≥–æ)"
    words_text += ")"
    
    await callback.message.edit_text(words_text, parse_mode="HTML")
    
    # TODO: –ü–µ—Ä–µ–π—Ç–∏ –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.answer("‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=False)


# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

def get_user_words(user_id: int) -> list[str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    """
    session_data = load_user_session(user_id)
    if session_data is None:
        return []
    return session_data.get("words", [])


def clear_user_session(user_id: int):
    """
    –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    delete_user_session(user_id)
    logger.debug(f"üóëÔ∏è –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞")
