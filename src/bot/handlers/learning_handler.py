"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è –≤ Telegram –±–æ—Ç–µ (–≠—Ç–∞–ø 6)
–§—É–Ω–∫—Ü–∏–∏: –Ω–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏, –ø–æ–∫–∞–∑ —Å–ª–æ–≤–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
"""

import logging
import random
import asyncio
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.types.input_file import BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

from src.bot.states import LearningSessionStates
from src.core.learning_session import LearningSession
from src.core.dictionary_manager import DictionaryManager
from src.core.progress_tracker import ProgressTracker
from src.core.session_persistence import SessionPersistence
from src.services.tts_service import TTSService
from src.services.variant_generator_service import VariantGeneratorService
from src.bot.keyboards.keyboards import get_answer_variants_keyboard, get_end_session_keyboard, get_answer_variants_keyboard_with_pause
from config.settings import DATA_DIR

logger = logging.getLogger(__name__)

router = Router(name="learning_router")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
dict_manager = DictionaryManager()
tts_service = TTSService()
variant_service = VariantGeneratorService()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏
# –ö–ª—é—á: user_id, –ó–Ω–∞—á–µ–Ω–∏–µ: LearningSession –æ–±—ä–µ–∫—Ç
active_sessions = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π
session_resume_locks = {}
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ê #3: –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö Locks
session_lock_cleanup_tasks = {}


async def cleanup_session_lock(session_id: str, delay: int = 3600):
    """
    –û—á–∏—Å—Ç–∏—Ç—å Lock —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ —á–∞—Å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    Args:
        session_id: ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3600 —Å–µ–∫ = 1 —á–∞—Å)
    """
    try:
        await asyncio.sleep(delay)
        if session_id in session_resume_locks:
            del session_resume_locks[session_id]
            logger.debug(f"üóëÔ∏è Lock —Å–µ—Å—Å–∏–∏ {session_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ø–∞–º—è—Ç–∏")
        if session_id in session_lock_cleanup_tasks:
            del session_lock_cleanup_tasks[session_id]
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Lock —Å–µ—Å—Å–∏–∏ {session_id}: {e}")


def generate_simple_variants(word: str) -> list:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–≤–∞ –µ—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback –º–µ—Ö–∞–Ω–∏–∑–º
    """
    variants = []
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–∫–≤
    if len(word) > 2:
        word_list = list(word)
        for _ in range(3):
            random.shuffle(word_list)
            variants.append(''.join(word_list))
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –±—É–∫–≤
    if len(word) > 1:
        variants.append(word[:-1] + '–∞')
        variants.append(word[:-1] + '—ã')
        variants.append(word[:-1] + '–æ')
    
    variants = list(set(variants))
    variants = [v for v in variants if v != word and len(v) > 0]
    
    return variants[:3] if len(variants) >= 3 else variants

# ============================================================================
# –ù–ê–ß–ê–õ–û –°–ï–°–°–ò–ò –û–ë–£–ß–ï–ù–ò–Ø
# ============================================================================

@router.callback_query(F.data.startswith("learning_start:"))
async def callback_start_learning(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ" –¥–ª—è —Å–ª–æ–≤–∞—Ä—è
    """
    user_id = callback.from_user.id
    dict_id = callback.data.split(":")[1]
    
    logger.info(f"üéì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–∞—Ä—ë–º {dict_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
        dictionary = dict_manager.get_dictionary(user_id, dict_id)
        if not dictionary or not dictionary.words:
            await callback.answer("‚ùå –°–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
        session = LearningSession(
            user_id=user_id,
            dict_id=dict_id,
            dict_name=dictionary.name,
            words_list=dictionary.words
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏
        active_sessions[user_id] = session
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
        await state.set_state(LearningSessionStates.in_session)
        await state.update_data(session_id=session.session_id, dict_id=dict_id)
        
        # === –ü–õ–ê–ù 0012 –§–∞–∑–∞ 2.1: –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º answer() –≤–º–µ—Å—Ç–æ edit_text() –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –í–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", —Å–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"""üéì **–ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ!**

üìñ –°–ª–æ–≤–∞—Ä—å: **{dictionary.name}**
üìö –°–ª–æ–≤: {len(dictionary.words)}
‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ 18-30 –≤–æ–ø—Ä–æ—Å–æ–≤ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è)

–ù—É–∂–Ω–æ –≤—ã—É—á–∏—Ç—å –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ –æ—Ü–µ–Ω–∫–∏ "5"! ‚úÖ
–ö—Ä–∏—Ç–µ—Ä–∏–π: 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥ + 75% —É—Å–ø–µ—Ö–∞

–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è... –ù–∞—á–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É! üöÄ"""
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.answer(text, parse_mode="Markdown")
        await callback.answer()
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—É—á–µ–Ω–∏—è
        await asyncio.sleep(1)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
        await show_next_word(user_id, callback.message.bot, state)
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–µ—Å—Å–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è", show_alert=True)


# ============================================================================
# –ü–û–ö–ê–ó –°–õ–ï–î–£–Æ–©–ï–ì–û –°–õ–û–í–ê
# ============================================================================

async def show_next_word(user_id: int, bot, state: FSMContext, send_feedback: str = None):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞)
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä)
    2. –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    3. –ü–æ–¥–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫
    4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: Telegram bot –æ–±—ä–µ–∫—Ç
        state: FSMContext
        send_feedback: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç
    """
    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ê #6: –ü—Ä–æ–≤–µ—Ä—è–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        if current_state not in (LearningSessionStates.in_session, LearningSessionStates.waiting_for_answer):
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_state}. –û–∂–∏–¥–∞–µ—Ç—Å—è in_session –∏–ª–∏ waiting_for_answer.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        session = active_sessions.get(user_id)
        if not session:
            logger.error(f"‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞")
            return
        
        # === –ê–î–ê–ü–¢–ò–í–ù–´–ô –í–´–ë–û–† –°–õ–ï–î–£–Æ–©–ï–ì–û –°–õ–û–í–ê ===
        current_word = session.get_next_word()
        
        # –ï—Å–ª–∏ —Å–ª–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        if current_word is None:
            await finish_learning_session(user_id, bot, state)
            return
        
        # –î–æ–±–∞–≤–ª—è—é —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –ø—Ä–æ—Ç–∏–≤ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        word_obj = session.get_word_data(current_word)
        if word_obj and word_obj.is_mastered:
            logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∫–∞! –°–ª–æ–≤–æ '{current_word}' –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã—É—á–µ–Ω–Ω–æ–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –∏—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ.")
            await show_next_word(user_id, bot, state, send_feedback=send_feedback)
            return
        
        # === –ü–õ–ê–ù 0012 –§–∞–∑–∞ 2.2: –£–±—Ä–∞—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ===
        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —á–∞—Ç–µ –∫–∞–∫ milestone (–Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è)
        if session.should_show_progress_update():
            progress_msg = await bot.send_message(
                user_id,
                session.get_progress_update(),
                parse_mode="Markdown"
            )
            # ‚úÖ –£–î–ê–õ–ï–ù–û: –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
            # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–ø–µ—Ä—å –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        
        # === –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ –í–ê–†–ò–ê–ù–¢–û–í ===
        # (–ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞)
        word_obj = session.get_word_data(current_word)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —Å–ª–æ–≤–∞
        wrong_variants = []
        try:
            wrong_variants = variant_service.get_all_variants(current_word)
            
            if wrong_variants and len(wrong_variants) == 3:
                logger.debug(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è '{current_word}': {wrong_variants}")
            else:
                logger.warning(f"‚ö†Ô∏è –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è '{current_word}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ...")
                try:
                    new_variants = await variant_service.generate_variants_single(current_word)
                    if new_variants and isinstance(new_variants, list) and len(new_variants) == 3:
                        wrong_variants = new_variants
                        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è '{current_word}': {wrong_variants}")
                    else:
                        wrong_variants = generate_simple_variants(current_word)
                except Exception as gen_err:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã: {gen_err}")
                    wrong_variants = generate_simple_variants(current_word)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {e}")
            wrong_variants = generate_simple_variants(current_word)
        
        if not wrong_variants:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–ª–æ–≤–∞ '{current_word}'")
            await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.")
            return
        
        # === –ê–£–î–ò–û –ü–†–û–ò–ó–ù–û–®–ï–ù–ò–Ø ===
        audio_bytes = None
        try:
            audio_bytes = await tts_service.generate_audio(current_word)
            if audio_bytes:
                logger.debug(f"üîä –ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ –¥–ª—è —Å–ª–æ–≤–∞ '{current_word}' ({len(audio_bytes)} –±–∞–π—Ç)")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ: {e}")
        
        # === –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ì–û–õ–û–°–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===
        voice_message_id = None
        if audio_bytes:
            try:
                voice_msg = await bot.send_voice(
                    chat_id=user_id,
                    voice=BufferedInputFile(file=audio_bytes, filename=f"{current_word}.mp3")
                )
                voice_message_id = voice_msg.message_id
                logger.info(f"üîä –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–ª–æ–≤–∞ '{current_word}'")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # === –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í–ê–†–ò–ê–ù–¢–´ –û–¢–í–ï–¢–û–í –° –ö–ù–û–ü–ö–û–ô –ü–ê–£–ó–´ (–ü–†–û–ë–õ–ï–ú–ê #1) ===
        keyboard_data = get_answer_variants_keyboard_with_pause(current_word, wrong_variants, session.session_id)
        if not keyboard_data:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–æ–≤–∞ '{current_word}'")
            await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            return
        
        # === –ü–õ–ê–ù 0012 –§–∞–∑–∞ 2.4: –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ===
        mastered = session.get_mastered_count()
        total = len(session.words)
        position = session.get_current_position()
        
        progress_text = f"üìä –í—ã—É—á–µ–Ω–æ: {mastered}/{total} | –í–æ–ø—Ä–æ—Å #{position}"
        message_text = f"{progress_text}\n\nüî§ –í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ:"
        
        msg = await bot.send_message(
            user_id,
            message_text,
            reply_markup=keyboard_data['keyboard']
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        await state.set_state(LearningSessionStates.waiting_for_answer)
        await state.update_data(
            current_word=current_word,
            message_id=msg.message_id,
            voice_message_id=voice_message_id
        )
        
        progress = session.get_word_data(current_word)
        logger.info(f"üìù –°–ª–æ–≤–æ –ø–æ–∫–∞–∑–∞–Ω–æ: '{current_word}' (–æ—à–∏–±–æ–∫: {progress.incorrect_count}, –ø–æ–ø—ã—Ç–æ–∫: {progress.total_attempts})")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª–æ–≤–∞: {e}")
        await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# ============================================================================
# –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê
# ============================================================================

@router.callback_query(F.data.startswith("answer:"), LearningSessionStates.waiting_for_answer)
async def callback_handle_answer(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
    ‚úÖ –ü–ª–∞–Ω 0012 –§–∞–∑–∞ 3.1: –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ê #5: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Å—Å–∏–∏
    """
    user_id = callback.from_user.id
    
    try:
        # === –ü–õ–ê–ù 0012 –§–∞–∑–∞ 3.1: –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π ===
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        if current_state != LearningSessionStates.waiting_for_answer:
            logger.warning(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç {user_id}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º (—Å–æ—Å—Ç–æ—è–Ω–∏–µ={current_state})")
            return
        
        # –°—Ä–∞–∑—É –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ in_session —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è
        await state.set_state(LearningSessionStates.in_session)
        
        # –ü–†–û–ë–õ–ï–ú–ê #5: –†–∞–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Å—Å–∏–∏
        session = active_sessions.get(user_id)
        if not session:
            logger.error(f"‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")
            await state.clear()  # –û—á–∏—â–∞–µ–º FSM
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            return
        state_data = await state.get_data()
        voice_message_id = state_data.get('voice_message_id')
        
        if voice_message_id:
            try:
                await callback.message.bot.delete_message(chat_id=user_id, message_id=voice_message_id)
                logger.debug(f"üóëÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞")
            except Exception as del_err:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {del_err}")
        
        parts = callback.data.split(":", 2)
        if len(parts) != 3:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")
            return
        
        correct_word = parts[1].strip()
        selected_variant = parts[2].strip()
        
        if not correct_word or not selected_variant:
            logger.error(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: correct_word='{correct_word}', selected_variant='{selected_variant}'")
            await callback.answer("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return
        
        # Session —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –Ω–∞–ø—Ä—è–º—É—é
        current_word = session.get_current_word()
        if correct_word != current_word:
            logger.error(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–ª–æ–≤–∞: callback_word='{correct_word}' != session_word='{current_word}'")
            await callback.answer("‚ùå –°–ª–æ–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ —Å–µ—Å—Å–∏—é.", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = (selected_variant == correct_word)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–µ—Å—Å–∏—é
        session.record_answer(correct_word, is_correct)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        word_obj = session.get_word_data(correct_word)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–¥–±–µ–∫
        if is_correct:
            feedback = f"‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n**{correct_word}**"
            logger.info(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è —Å–ª–æ–≤–∞ '{correct_word}'")
        else:
            feedback = f"‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!**\n**{correct_word}**"
            logger.info(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –≤—ã–±—Ä–∞–ª '{selected_variant}' –≤–º–µ—Å—Ç–æ '{correct_word}'")
        
        # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ï–°–õ–ò –°–õ–û–í–û –í–´–£–ß–ï–ù–û –ù–ê 5 ===
        mastered_message = ""
        if word_obj and word_obj.is_mastered:
            progress_data = session.get_progress_update()
            mastered_message = f"‚ú® **–°–õ–û–í–û –í–´–£–ß–ï–ù–û –ù–ê 5!** ‚ú®\n{correct_word}\n\n"
        
        # === –û–¢–ü–†–ê–í–õ–Ø–ï–ú –§–ò–î–ë–ï–ö –ë–ï–ó –ê–í–¢–û–£–î–ê–õ–ï–ù–ò–Ø ===
        # (—É–∂–µ –≤—ã–∑—ã–≤–∞–ª–∏ callback.answer() –≤—ã—à–µ)
        await callback.message.delete()
        
        combined_feedback = mastered_message + feedback if mastered_message else feedback
        feedback_msg = await callback.message.bot.send_message(
            user_id,
            combined_feedback,
            parse_mode="Markdown"
        )
        
        # === –ü–õ–ê–ù 0012 –§–∞–∑–∞ 2.3: –£–±—Ä–∞—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–¥–±–µ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===
        # –§–∏–¥–±–µ–∫ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        if session.is_complete():
            # –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            await finish_learning_session(user_id, callback.message.bot, state)
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
            # ‚úÖ –£–î–ê–õ–ï–ù–û: –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–¥–±–µ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–±—ã–ª–æ sleep(3) –∏ delete)
            asyncio.create_task(show_next_word(user_id, callback.message.bot, state))
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


# ============================================================================
# –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–ï–°–°–ò–ò
# ============================================================================

async def finish_learning_session(user_id: int, bot, state: FSMContext, last_feedback: str = None):
    """
    –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ ProgressTracker
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: Telegram bot –æ–±—ä–µ–∫—Ç
        state: FSMContext
        last_feedback: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        session = active_sessions.get(user_id)
        if not session:
            logger.error(f"‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏")
            await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞")
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = session.finish_session()
        
        # === –°–û–•–†–ê–ù–Ø–ï–ú –ü–†–û–ì–†–ï–°–° –ß–ï–†–ï–ó PROGRESS TRACKER ===
        try:
            progress_tracker = ProgressTracker(user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
            progress_tracker.update_session_stats(
                dict_id=session.dict_id,
                correct_count=stats.correct_answers,
                incorrect_count=stats.incorrect_answers,
                words_mastered=stats.words_mastered_list
            )
            
            # === –°–û–•–†–ê–ù–Ø–ï–ú SESSIONSTATS –í –§–ê–ô–õ–´ ===
            try:
                from pathlib import Path
                from src.utils.file_helpers import save_json
                user_data_dir = DATA_DIR / "users" / str(user_id)
                sessions_dir = user_data_dir / "sessions"
                sessions_dir.mkdir(parents=True, exist_ok=True)
                
                stats_file = sessions_dir / f"{session.session_id}.json"
                stats_dict = stats.model_dump(mode='json')
                save_json(str(stats_file), stats_dict)
                
                logger.info(f"‚úÖ SessionStats —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {stats_file}")
            except Exception as save_err:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ SessionStats: {save_err}")
            
            logger.info(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as progress_err:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {progress_err}")
        
        # === –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –°–õ–û–í–ê–†–Ø ===
        if stats.is_complete:
            try:
                dictionary = dict_manager.get_dictionary(user_id, session.dict_id)
                if dictionary:
                    dictionary.is_fully_learned = True
                    dictionary.last_session_date = datetime.now()
                    dictionary.total_sessions += 1
                    dict_manager.update_dictionary(
                        user_id,
                        session.dict_id,
                        dictionary.words
                    )
                    logger.info(f"‚úÖ –°–ª–æ–≤–∞—Ä—å '{session.dict_name}' –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—É—á–µ–Ω–Ω—ã–π")
            except Exception as dict_err:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è: {dict_err}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        summary = session.get_summary()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∏–¥–±–µ–∫ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if last_feedback:
            summary = f"{last_feedback}\n\n{summary}"
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω—Ü–∞ —Å–µ—Å—Å–∏–∏
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìö –ú–æ–∏ —Å–ª–æ–≤–∞—Ä–∏", callback_data="view_dictionaries")
        keyboard.button(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")
        keyboard.adjust(2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            user_id,
            summary,
            parse_mode="Markdown",
            reply_markup=keyboard.as_markup()
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
        del active_sessions[user_id]
        
        # –û—á–∏—â–∞–µ–º FSM
        await state.clear()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ê #7: –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —Å –¥–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await SessionPersistence.delete_session(user_id, session.session_id)
        
        logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")


# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–ê–£–ó–´ –°–ï–°–°–ò–ò (–≠—Ç–∞–ø 8)
# ============================================================================

@router.callback_query(F.data.startswith("pause_session:"))
async def callback_pause_session(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–∞—É–∑–∞" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏ (–≠—Ç–∞–ø 8)
    """
    user_id = callback.from_user.id
    session_id = callback.data.split(":")[1]
    
    logger.info(f"‚è∏Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ—Å—Ç–∞–≤–∏–ª —Å–µ—Å—Å–∏—é –Ω–∞ –ø–∞—É–∑—É: {session_id}")
    
    try:
        session = active_sessions.get(user_id)
        if not session:
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        if session.session_id != session_id:
            await callback.answer("‚ùå ID —Å–µ—Å—Å–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ FSM
        await state.update_data(
            paused_session_id=session_id,
            paused_session_data={
                'user_id': user_id,
                'dict_id': session.dict_id,
                'dict_name': session.dict_name,
                'current_word': session.current_word,
                'total_correct': session.stats.correct_answers,
                'total_incorrect': session.stats.incorrect_answers
            }
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
        del active_sessions[user_id]
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ê #7: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –Ω–∞ –¥–∏—Å–∫ –ø–µ—Ä–µ–¥ –ø–∞—É–∑–æ–π
        await SessionPersistence.save_session(user_id, session)
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ê #4: –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã
        await state.set_state(LearningSessionStates.session_paused)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞—É–∑–µ
        pause_text = f"""‚è∏Ô∏è **–°–ï–°–°–ò–Ø –°–û–•–†–ê–ù–ï–ù–ê**

üìñ –°–ª–æ–≤–∞—Ä—å: **{session.dict_name}**
‚è±Ô∏è –°–µ—Å—Å–∏—è ID: `{session_id}`

–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢—ã –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.

**–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {session.stats.correct_answers}
‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {session.stats.incorrect_answers}"""
        
        from src.bot.keyboards.keyboards import get_session_paused_keyboard
        await callback.message.edit_text(
            pause_text,
            parse_mode="Markdown",
            reply_markup=get_session_paused_keyboard(session_id)
        )
        
        await callback.answer()
        logger.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—É–∑–µ —Å–µ—Å—Å–∏–∏: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—É–∑–µ: {str(e)}", show_alert=True)


@router.callback_query(F.data.startswith("resume_session:"))
async def callback_resume_session(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ" –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ (–≠—Ç–∞–ø 8)
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ê #3: –ó–∞—â–∏—Ç–∞ –æ—Ç race conditions —á–µ—Ä–µ–∑ asyncio.Lock
    """
    user_id = callback.from_user.id
    session_id = callback.data.split(":")[1]
    
    logger.info(f"‚ñ∂Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é: {session_id}")
    
    try:
        # –ü–†–û–ë–õ–ï–ú–ê #3: –°–æ–∑–¥–∞—ë–º/–ø–æ–ª—É—á–∞–µ–º –ª–æ–∫ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        if session_id not in session_resume_locks:
            session_resume_locks[session_id] = asyncio.Lock()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ê #3: –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º-–∞—É—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç deadlock
        try:
            async with asyncio.timeout(30):  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º-–∞—É—Ç
                async with session_resume_locks[session_id]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ —É–∂–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞
                    if user_id in active_sessions:
                        await callback.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", show_alert=True)
                        return
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                    state_data = await state.get_data()
                    paused_data = state_data.get('paused_session_data')
                    
                    if not paused_data:
                        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã! state_data={state_data}")
                        await callback.answer("‚ùå –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
                        await state.clear()
                        return
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ SessionPersistence (–ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
                    session = await SessionPersistence.load_session(user_id, session_id)  # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    if not session:
                        await callback.answer("‚ùå –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
                        await state.clear()
                        return
                    
                    # ‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
                    # - –í—Å–µ —Å–ª–æ–≤–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
                    # - –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
                    # - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏ (correct_answers, incorrect_answers, etc.)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏
                    active_sessions[user_id] = session
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await state.set_state(LearningSessionStates.in_session)
                    await state.update_data(session_id=session.session_id, dict_id=paused_data['dict_id'])
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                    resume_text = f"""‚ñ∂Ô∏è **–û–ë–£–ß–ï–ù–ò–ï –í–û–ó–û–ë–ù–û–í–õ–ï–ù–û!**

üìñ –°–ª–æ–≤–∞—Ä—å: **{paused_data['dict_name']}**

–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç—Å—é–¥–∞... üöÄ"""
                    
                    await callback.message.edit_text(resume_text, parse_mode="Markdown")
                    await callback.answer()
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
                    await show_next_word(user_id, callback.message.bot, state)
                    logger.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_id} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ê #3: –ó–∞–ø—É—Å–∫–∞–µ–º cleanup –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–≥–æ Lock
                    if session_id not in session_lock_cleanup_tasks:
                        cleanup_task = asyncio.create_task(cleanup_session_lock(session_id))
                        session_lock_cleanup_tasks[session_id] = cleanup_task
        except asyncio.TimeoutError:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}", show_alert=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        await callback.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(F.data.startswith("end_paused_session:"))
async def callback_end_paused_session(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—É–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–≠—Ç–∞–ø 8)
    """
    user_id = callback.from_user.id
    session_id = callback.data.split(":")[1]
    
    logger.info(f"‚èπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø–∞—É–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é: {session_id}")
    
    try:
        end_text = """‚úÖ **–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞**

–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω! üíæ

–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."""
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìö –ú–æ–∏ —Å–ª–æ–≤–∞—Ä–∏", callback_data="view_dictionaries")
        keyboard.button(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")
        keyboard.adjust(2)
        
        await callback.message.edit_text(
            end_text,
            parse_mode="Markdown",
            reply_markup=keyboard.as_markup()
        )
        
        await callback.answer()
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ê #4: –û—á–∏—â–∞–µ–º FSM –î–û –ö–û–ù–¶–ê, –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—É–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ê #7: –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —Å –¥–∏—Å–∫–∞ –ü–ï–†–ï–î –æ—á–∏—Å—Ç–∫–æ–π
        state_data = await state.get_data()
        paused_session_id = state_data.get('paused_session_id', None) if state_data else None
        
        await state.clear()
        
        if paused_session_id:
            await SessionPersistence.delete_session(user_id, paused_session_id)
        logger.info(f"‚úÖ –ü–∞—É–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è {session_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—É–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ü–û–í–¢–û–†–ê –û–ë–£–ß–ï–ù–ò–Ø
# ============================================================================

@router.callback_query(F.data == "repeat_learning")
async def callback_repeat_learning(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
    """
    user_id = callback.from_user.id
    
    logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ö–æ—á–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏
    from src.bot.handlers.dictionary_handler import show_dictionaries
    await show_dictionaries(user_id, callback, is_callback=True)
