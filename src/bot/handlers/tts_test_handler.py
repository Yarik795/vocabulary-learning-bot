"""
–¢–µ—Å—Ç–æ–≤—ã–π handler –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TTS —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
"""

import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import FSInputFile

from src.services.tts_service import TTSService

logger = logging.getLogger(__name__)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ main.py)
tts_service: TTSService = None


def init_tts_test_handler(tts_svc: TTSService):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è handler —Å —Å–µ—Ä–≤–∏—Å–æ–º TTS"""
    global tts_service
    tts_service = tts_svc
    logger.info("‚úÖ TTS test handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


@router.message(Command("test_tts"))
async def cmd_test_tts(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TTS —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /test_tts –∫–æ—Ä–æ–≤–∞
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–ª—è —Å–ª–æ–≤–∞ "–∫–æ—Ä–æ–≤–∞"
    """
    if not tts_service:
        await message.answer("‚ùå TTS —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(maxsplit=1)
    
    if len(args) < 2:
        await message.answer(
            "üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TTS (Text-to-Speech)\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /test_tts <—Å–ª–æ–≤–æ>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /test_tts –∫–æ—Ä–æ–≤–∞\n\n"
            "–ë–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –≤–∞–º."
        )
        return
    
    word = args[1].strip()
    
    if not word or len(word) > 50:
        await message.answer("‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤!")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    status_msg = await message.answer(f"üîä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è —Å–ª–æ–≤–∞ '{word}'...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ
        audio_bytes = await tts_service.generate_audio(word)
        
        if audio_bytes is None:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è —Å–ª–æ–≤–∞ '{word}'")
            return
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
        await message.answer_voice(
            voice=types.input_file.BufferedInputFile(
                file=audio_bytes,
                filename=f"{word}.mp3"
            ),
            caption=f"üéµ –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ª–æ–≤–∞: **{word}**"
        )
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        await status_msg.delete()
        
        logger.info(f"‚úÖ –ê—É–¥–∏–æ –¥–ª—è '{word}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("tts_cache_info"))
async def cmd_tts_cache_info(message: types.Message):
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TTS –∫—ç—à–µ
    """
    if not tts_service:
        await message.answer("‚ùå TTS —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return
    
    cache_info = tts_service.get_cache_info()
    
    info_text = (
        "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –∞—É–¥–∏–æ:\n\n"
        f"üìÅ –ü–∞–ø–∫–∞: `{cache_info.get('cache_dir', 'N/A')}`\n"
        f"üì¶ –§–∞–π–ª–æ–≤: {cache_info.get('total_files', 0)}\n"
        f"üíæ –†–∞–∑–º–µ—Ä: {cache_info.get('total_size_mb', 0)} –ú–ë"
    )
    
    await message.answer(info_text)
    logger.info(f"Cache info: {cache_info}")


@router.message(Command("clear_tts_cache"))
async def cmd_clear_tts_cache(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∞—É–¥–∏–æ
    """
    if not tts_service:
        await message.answer("‚ùå TTS —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return
    
    try:
        tts_service.clear_cache()
        await message.answer("‚úÖ –ö—ç—à –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")
        logger.info("–ö—ç—à –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –∞—É–¥–∏–æ: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")