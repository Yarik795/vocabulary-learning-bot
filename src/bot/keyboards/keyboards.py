"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è Telegram –±–æ—Ç–∞
–§—É–Ω–∫—Ü–∏–∏: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞, –¥–µ–π—Å—Ç–≤–∏—è
"""

import logging
from typing import List
from aiogram.utils.keyboard import InlineKeyboardBuilder
from src.utils.word_helpers import shuffle_variants
from aiogram.types import InlineKeyboardMarkup

logger = logging.getLogger(__name__)


# ============================================================================
# –§–£–ù–ö–¶–ò–ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø (–ü–ª–∞–Ω 0012)
# ============================================================================

def get_learning_progress_text(mastered: int, total: int, question_number: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
    
    ‚úÖ –ü–ª–∞–Ω 0012: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    
    Args:
        mastered: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        question_number: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        
    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    return f"üìä –í—ã—É—á–µ–Ω–æ: {mastered}/{total} | –í–æ–ø—Ä–æ—Å #{question_number}"


def get_main_menu_keyboard():
    """
    –°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    keyboard = InlineKeyboardBuilder()
    
    keyboard.button(text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="upload_photo")
    keyboard.button(text="üìö –ú–æ–∏ —Å–ª–æ–≤–∞—Ä–∏", callback_data="view_dictionaries")
    keyboard.button(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="show_progress")
    keyboard.button(text="‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")
    
    keyboard.adjust(2)
    
    return keyboard.as_markup()


def get_dictionary_list_keyboard(dictionaries):
    """
    –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ–π
    
    Args:
        dictionaries: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Dictionary
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–ª–æ–≤–∞—Ä–µ–π
    """
    keyboard = InlineKeyboardBuilder()
    
    for dictionary in dictionaries:
        button_text = f"üìñ {dictionary.name} ({len(dictionary.words)} —Å–ª–æ–≤)"
        button_data = f"dict_select:{dictionary.id}"
        keyboard.button(text=button_text, callback_data=button_data)
    
    keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="upload_photo")
    keyboard.button(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")
    
    keyboard.adjust(1)
    
    return keyboard.as_markup()


def get_answer_variants_keyboard(correct_word: str, wrong_variants: List[str]) -> dict:
    """
    –°–æ–∑–¥–∞—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –ë–µ—Ä—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ + 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞
    2. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Ö
    3. –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –≤ –≤–∏–¥–µ —Å–µ—Ç–∫–∏ 2x2
    
    Args:
        correct_word: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
        wrong_variants: –°–ø–∏—Å–æ–∫ –∏–∑ 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å:
        - 'keyboard': InlineKeyboardMarkup –æ–±—ä–µ–∫—Ç
        - 'variants': –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ–∫–∞–∑–∞ [–≤–∞—Ä–∏–∞–Ω—Ç1, –≤–∞—Ä–∏–∞–Ω—Ç2, –≤–∞—Ä–∏–∞–Ω—Ç3, –≤–∞—Ä–∏–∞–Ω—Ç4]
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not correct_word or not isinstance(wrong_variants, list):
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_answer_variants_keyboard: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return None
        
        if len(wrong_variants) < 3:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ({len(wrong_variants)}/3)")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ —á—Ç–æ –µ—Å—Ç—å
            variants_to_use = wrong_variants
        else:
            variants_to_use = wrong_variants[:3]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 3
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        all_variants = shuffle_variants(correct_word, variants_to_use)
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()
        
        for variant in all_variants:
            is_correct = (variant == correct_word)
            callback_data = f"answer:{correct_word}:{variant}"
            keyboard.button(text=variant, callback_data=callback_data)
        
        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ 2x2
        keyboard.adjust(2, 2)
        
        logger.debug(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã={all_variants}")
        
        return {
            'keyboard': keyboard.as_markup(),
            'variants': all_variants
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return None


def get_answer_variants_keyboard_with_pause(correct_word: str, wrong_variants: List[str], session_id: str) -> dict:
    """
    –°–æ–∑–¥–∞—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ò –∫–Ω–æ–ø–∫–æ–π –ø–∞—É–∑—ã (–ü–†–û–ë–õ–ï–ú–ê #1)
    
    Args:
        correct_word: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
        wrong_variants: –°–ø–∏—Å–æ–∫ –∏–∑ 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        session_id: ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–∞—É–∑—ã
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å:
        - 'keyboard': InlineKeyboardMarkup –æ–±—ä–µ–∫—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –ø–∞—É–∑—ã
        - 'variants': –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ–∫–∞–∑–∞
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not correct_word or not isinstance(wrong_variants, list):
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_answer_variants_keyboard_with_pause: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return None
        
        if len(wrong_variants) < 3:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ({len(wrong_variants)}/3)")
            variants_to_use = wrong_variants
        else:
            variants_to_use = wrong_variants[:3]
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        all_variants = shuffle_variants(correct_word, variants_to_use)
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Å–µ—Ç–∫–µ 2x2
        for variant in all_variants:
            callback_data = f"answer:{correct_word}:{variant}"
            keyboard.button(text=variant, callback_data=callback_data)
        
        keyboard.adjust(2, 2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–∞—É–∑—ã –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        from aiogram.types import InlineKeyboardButton
        pause_button = InlineKeyboardButton(
            text="‚è∏Ô∏è –ü–∞—É–∑–∞",
            callback_data=f"pause_session:{session_id}"
        )
        keyboard.row(pause_button)
        
        logger.debug(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞—É–∑–æ–π —Å–æ–∑–¥–∞–Ω–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã={all_variants}, session={session_id}")
        
        return {
            'keyboard': keyboard.as_markup(),
            'variants': all_variants
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞—É–∑–æ–π: {e}")
        return None


def get_end_session_keyboard() -> dict:
    """
    –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω—Ü–∞ —Å–µ—Å—Å–∏–∏
    
    Returns:
        InlineKeyboardMarkup —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —Å–µ—Å—Å–∏–∏
    """
    keyboard = InlineKeyboardBuilder()
    
    keyboard.button(text="üìö –ú–æ–∏ —Å–ª–æ–≤–∞—Ä–∏", callback_data=f"view_dictionaries")
    keyboard.button(text="üéì –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"repeat_learning")
    keyboard.button(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")
    
    keyboard.adjust(2, 1)
    
    return keyboard.as_markup()


def get_learning_session_keyboard(user_id: int, session_id: str) -> dict:
    """
    –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–∞—É–∑–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_id: ID —Å–µ—Å—Å–∏–∏
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–æ–π –ø–∞—É–∑—ã
    """
    keyboard = InlineKeyboardBuilder()
    
    keyboard.button(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=f"pause_session:{session_id}")
    
    keyboard.adjust(1)
    
    return keyboard.as_markup()


def get_session_paused_keyboard(session_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞—É–∑—ã —Å–µ—Å—Å–∏–∏
    
    Args:
        session_id: ID —Å–µ—Å—Å–∏–∏
        
    Returns:
        InlineKeyboardMarkup —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    """
    keyboard = InlineKeyboardBuilder()
    
    keyboard.button(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data=f"resume_session:{session_id}")
    keyboard.button(text="‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data=f"end_paused_session:{session_id}")
    keyboard.button(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")
    
    keyboard.adjust(1)
    
    return keyboard.as_markup()


def get_edit_keyboard():
    """
    –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    keyboard = InlineKeyboardBuilder()
    
    keyboard.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="confirm_edit")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
    
    keyboard.adjust(2)
    
    return keyboard.as_markup()
