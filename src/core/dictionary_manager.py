"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏)
–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: data/users/{user_id}/dictionaries/
"""

import logging
import json
from pathlib import Path
from datetime import datetime
from typing import List, Optional, Dict

from config.settings import DATA_DIR
from src.core.models import Dictionary
from src.utils.file_helpers import save_json, load_json, generate_unique_id, ensure_user_directories

logger = logging.getLogger(__name__)


class DictionaryManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –û–ø–µ—Ä–∞—Ü–∏–∏: —Å–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, —Å–ø–∏—Å–æ–∫
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.base_data_dir = DATA_DIR
    
    
    def _get_user_dictionaries_dir(self, user_id: int) -> Path:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            Path –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        return self.base_data_dir / "users" / str(user_id) / "dictionaries"
    
    
    def _get_dictionary_filepath(self, user_id: int, dict_id: str) -> Path:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–ª–æ–≤–∞—Ä—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dict_id: ID —Å–ª–æ–≤–∞—Ä—è
            
        Returns:
            Path –∫ —Ñ–∞–π–ª—É —Å–ª–æ–≤–∞—Ä—è
        """
        return self._get_user_dictionaries_dir(user_id) / f"{dict_id}.json"
    
    
    def create_dictionary(self, user_id: int, words: List[str], name: Optional[str] = None) -> Optional[Dictionary]:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            words: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –û–±—ä–µ–∫—Ç Dictionary –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            ensure_user_directories(user_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–ª–æ–≤–∞—Ä—è
            dict_id = generate_unique_id()
            
            # === –ö–ê–ü–ò–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–í–´–• –ë–£–ö–í –°–õ–û–í ===
            capitalized_words = [word.capitalize() if word else word for word in words]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
            if not name:
                dict_count = len(self.list_dictionaries(user_id))
                name = f"–°–ª–æ–≤–∞—Ä—å #{dict_count + 1}"
            
            # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Å–ª–æ–≤–∞—Ä—è
            dictionary = Dictionary(
                id=dict_id,
                name=name,
                words=capitalized_words,
                created_at=datetime.now(),
                updated_at=datetime.now()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            filepath = self._get_dictionary_filepath(user_id, dict_id)
            dict_data = dictionary.model_dump(mode='json')
            
            if save_json(filepath, dict_data):
                logger.info(f"‚úÖ –°–ª–æ–≤–∞—Ä—å —Å–æ–∑–¥–∞–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, ID {dict_id}, —Å–ª–æ–≤: {len(capitalized_words)}")
                return dictionary
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è {dict_id}")
                return None
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
            return None
    
    
    def get_dictionary(self, user_id: int, dict_id: str) -> Optional[Dictionary]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –ø–æ ID
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dict_id: ID —Å–ª–æ–≤–∞—Ä—è
            
        Returns:
            –û–±—ä–µ–∫—Ç Dictionary –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, None –∏–Ω–∞—á–µ
        """
        try:
            filepath = self._get_dictionary_filepath(user_id, dict_id)
            data = load_json(filepath, default=None)
            
            if data:
                dictionary = Dictionary(**data)
                logger.debug(f"‚úÖ –°–ª–æ–≤–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω: {dict_id}")
                return dictionary
            else:
                logger.warning(f"‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {dict_id}")
                return None
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤–∞—Ä—è {dict_id}: {e}")
            return None
    
    
    def update_dictionary(self, user_id: int, dict_id: str, words: List[str], name: Optional[str] = None) -> bool:
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dict_id: ID —Å–ª–æ–≤–∞—Ä—è
            words: –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
            name: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å
            dictionary = self.get_dictionary(user_id, dict_id)
            if not dictionary:
                logger.error(f"‚ùå –°–ª–æ–≤–∞—Ä—å {dict_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # === –ö–ê–ü–ò–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–í–´–• –ë–£–ö–í –°–õ–û–í ===
            capitalized_words = [word.capitalize() if word else word for word in words]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            dictionary.words = capitalized_words
            if name:
                dictionary.name = name
            dictionary.updated_at = datetime.now()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
            filepath = self._get_dictionary_filepath(user_id, dict_id)
            dict_data = dictionary.model_dump(mode='json')
            
            if save_json(filepath, dict_data):
                logger.info(f"‚úÖ –°–ª–æ–≤–∞—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω: {dict_id}, —Å–ª–æ–≤: {len(capitalized_words)}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è {dict_id}")
                return False
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è {dict_id}: {e}")
            return False
    
    
    def delete_dictionary(self, user_id: int, dict_id: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dict_id: ID —Å–ª–æ–≤–∞—Ä—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            filepath = self._get_dictionary_filepath(user_id, dict_id)
            
            if filepath.exists():
                filepath.unlink()
                logger.info(f"üóëÔ∏è –°–ª–æ–≤–∞—Ä—å —É–¥–∞–ª—ë–Ω: {dict_id}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å {dict_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
                return False
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è {dict_id}: {e}")
            return False
    
    
    def list_dictionaries(self, user_id: int) -> List[Dictionary]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Dictionary
        """
        try:
            user_dict_dir = self._get_user_dictionaries_dir(user_id)
            
            if not user_dict_dir.exists():
                logger.debug(f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Å–ª–æ–≤–∞—Ä–µ–π (–ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                return []
            
            dictionaries = []
            
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for dict_file in user_dict_dir.glob("*.json"):
                try:
                    data = load_json(dict_file, default=None)
                    if data:
                        dictionary = Dictionary(**data)
                        dictionaries.append(dictionary)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤–∞—Ä—è –∏–∑ {dict_file}: {e}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            dictionaries.sort(key=lambda d: d.created_at, reverse=True)
            
            logger.debug(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dictionaries)} —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return dictionaries
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []
    
    
    def dictionary_exists(self, user_id: int, dict_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dict_id: ID —Å–ª–æ–≤–∞—Ä—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False –∏–Ω–∞—á–µ
        """
        filepath = self._get_dictionary_filepath(user_id, dict_id)
        return filepath.exists()
    
    
    def get_word_count(self, user_id: int, dict_id: str) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dict_id: ID —Å–ª–æ–≤–∞—Ä—è
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        """
        dictionary = self.get_dictionary(user_id, dict_id)
        if dictionary:
            return len(dictionary.words)
        return 0
    
    
    def get_total_words(self, user_id: int) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        """
        dictionaries = self.list_dictionaries(user_id)
        return sum(len(d.words) for d in dictionaries)
