"""
–ê–ª–≥–æ—Ä–∏—Ç–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è
–°–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –¥–æ –ø–æ–ª–Ω–æ–≥–æ —É—Å–≤–æ–µ–Ω–∏—è (–æ—Ü–µ–Ω–∫–∞ 5) –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
"""

import logging
from typing import List, Optional, Dict
from config.settings import (
    MASTERY_CONSECUTIVE_CORRECT,
    MASTERY_MIN_ATTEMPTS,
    MASTERY_SUCCESS_RATE
)
from src.core.models import Word

logger = logging.getLogger(__name__)


class AdaptiveLearning:
    """
    –ê–ª–≥–æ—Ä–∏—Ç–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
    
    –ö—Ä–∏—Ç–µ—Ä–∏–π –≤—ã—É—á–µ–Ω–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É "5":
    1. consecutive_correct >= 3 (3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥—Ä—è–¥ –±–µ–∑ –æ—à–∏–±–æ–∫)
    2. total_attempts >= 3 (–º–∏–Ω–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏)
    3. correct_count >= 3 (–º–∏–Ω–∏–º—É–º 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞)
    4. correct_count / total_attempts >= 0.75 (75% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏)
    """
    
    @staticmethod
    def update_word_status(word: Word, is_correct: bool) -> bool:
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        
        Args:
            word: –û–±—ä–µ–∫—Ç Word –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            is_correct: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –±—ã–ª –æ—Ç–≤–µ—Ç
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if is_correct:
                # –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
                word.consecutive_correct += 1
                word.correct_count += 1
                word.total_attempts += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã—É—á–µ–Ω–Ω–æ—Å—Ç–∏
                if AdaptiveLearning.is_word_mastered(word):
                    word.is_mastered = True
                    logger.info(f"‚ú® –°–ª–æ–≤–æ '{word.text}' –í–´–£–ß–ï–ù–û –Ω–∞ –æ—Ü–µ–Ω–∫—É 5!")
                
                # –°–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∂–µ)
                word.priority_score = max(1, word.priority_score - 20)
                logger.debug(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{word.text}' (–ø–æ–¥—Ä—è–¥: {word.consecutive_correct}, –ø–æ–ø—ã—Ç–æ–∫: {word.total_attempts})")
            
            else:
                # –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
                word.consecutive_correct = 0  # –°–ë–†–û–° —Å–µ—Ä–∏–∏!
                word.incorrect_count += 1
                word.total_attempts += 1
                word.is_mastered = False  # –û—Ç–º–µ–Ω—è–µ–º –≤—ã—É—á–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –±—ã–ª–∞
                
                # –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —á–∞—â–µ)
                word.priority_score = min(100, word.priority_score + 30)
                logger.debug(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{word.text}' (–æ—à–∏–±–æ–∫: {word.incorrect_count}, –ø–æ–ø—ã—Ç–æ–∫: {word.total_attempts})")
            
            return True
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤–∞ '{word.text}': {e}")
            return False
    
    
    @staticmethod
    def is_word_mastered(word: Word) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã—É—á–µ–Ω–æ –ª–∏ —Å–ª–æ–≤–æ –Ω–∞ –æ—Ü–µ–Ω–∫—É "5"
        
        –ö—Ä–∏—Ç–µ—Ä–∏–∏ (–í–°–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã):
        1. consecutive_correct >= MASTERY_CONSECUTIVE_CORRECT (3 –ø–æ–¥—Ä—è–¥)
        2. total_attempts >= MASTERY_MIN_ATTEMPTS (–º–∏–Ω–∏–º—É–º 3)
        3. correct_count >= MASTERY_MIN_ATTEMPTS (–º–∏–Ω–∏–º—É–º 3)
        4. correct_count / total_attempts >= MASTERY_SUCCESS_RATE (75%)
        
        Args:
            word: –û–±—ä–µ–∫—Ç Word –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å–ª–æ–≤–æ –≤—ã—É—á–µ–Ω–æ –Ω–∞ 5
        """
        # –ö—Ä–∏—Ç–µ—Ä–∏–π 1: 3 –ø–æ–¥—Ä—è–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
        if word.consecutive_correct < MASTERY_CONSECUTIVE_CORRECT:
            return False
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –º–∏–Ω–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
        if word.total_attempts < MASTERY_MIN_ATTEMPTS:
            return False
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π 3: –º–∏–Ω–∏–º—É–º 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
        if word.correct_count < MASTERY_MIN_ATTEMPTS:
            return False
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π 4: 75% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        success_rate = word.correct_count / word.total_attempts if word.total_attempts > 0 else 0
        if success_rate < MASTERY_SUCCESS_RATE:
            return False
        
        return True
    
    
    @staticmethod
    def get_next_word_by_priority(words: Dict[str, Word]) -> Optional[str]:
        """
        –í—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        
        –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞:
        1. –¢–æ–ª—å–∫–æ –Ω–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (is_mastered == False)
        2. –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ –≤—ã—É—á–µ–Ω–Ω—ã—Ö ‚Üí None (—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
        3. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:
           - –°–ª–æ–≤–∞ —Å recent errors (incorrect_count > 0 –∏ consecutive_correct == 0)
           - –°–ª–æ–≤–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º priority_score
           - –°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏—Å—å
        
        Args:
            words: –°–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤ {text: Word}
            
        Returns:
            –¢–µ–∫—Å—Ç —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–ª–∏ None –µ—Å–ª–∏ –≤—Å–µ –≤—ã—É—á–µ–Ω—ã
        """
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            unmastered_words = [
                (text, word) for text, word in words.items()
                if not word.is_mastered
            ]
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (—É–∂–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ)
            mastered_words = [text for text, word in words.items() if word.is_mastered]
            if mastered_words:
                logger.debug(f"üèÜ –£–∂–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–∏—Å–∫–ª—é—á–µ–Ω—ã): {', '.join(mastered_words)}")
            
            # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã ‚Üí —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if not unmastered_words:
                logger.info("üéâ –í–°–ï –°–õ–û–í–ê –í–´–£–ß–ï–ù–´ –ù–ê –û–¶–ï–ù–ö–£ 5!")
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            # 1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–ª–æ–≤–∞ —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏ (error_count > 0 –∏ consecutive_correct == 0)
            # 2. –ó–∞—Ç–µ–º: –ø–æ priority_score (–≤—ã—à–µ = –≤–∞–∂–Ω–µ–µ)
            # 3. –ó–∞—Ç–µ–º: –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ø—ã—Ç–æ–∫ (–º–µ–Ω—å—à–µ = –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ —Ä–µ–∂–µ)
            
            def sort_key(item):
                text, word = item
                # –°–ª–æ–≤–∞ —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏ (–Ω–µ –≤—ã—É—á–µ–Ω—ã –∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏) - –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                has_recent_error = word.incorrect_count > 0 and word.consecutive_correct == 0
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º tuple –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:
                # - –°–Ω–∞—á–∞–ª–∞ –ø–æ recent_error (True –ø–µ—Ä–µ–¥ False)
                # - –ü–æ—Ç–æ–º –ø–æ priority_score (–≤—ã—à–µ –ø–µ—Ä–µ–¥ –Ω–∏–∂–µ)
                # - –ü–æ—Ç–æ–º –ø–æ total_attempts (–º–µ–Ω—å—à–µ –ø–µ—Ä–µ–¥ –±–æ–ª—å—à–µ)
                return (-int(has_recent_error), -word.priority_score, word.total_attempts)
            
            unmastered_words.sort(key=sort_key)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            selected_word = unmastered_words[0][0]
            selected_obj = unmastered_words[0][1]
            
            # –î–æ–±–∞–≤–ª—è—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            if selected_obj.is_mastered:
                logger.warning(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –°–ª–æ–≤–æ '{selected_word}' –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã—É—á–µ–Ω–Ω–æ–µ, –Ω–æ –ø–æ–ø–∞–ª–æ –≤ –ø—É–ª –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã—Ö. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–µ)
                words_filtered = {k: v for k, v in words.items() if k != selected_word}
                if words_filtered:
                    return AdaptiveLearning.get_next_word_by_priority(words_filtered)
                else:
                    return None
            
            logger.debug(f"üéØ –í—ã–±—Ä–∞–Ω–æ —Å–ª–æ–≤–æ: '{selected_word}' (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {selected_obj.priority_score}, –æ—à–∏–±–æ–∫: {selected_obj.incorrect_count}, –ø–æ–ø—ã—Ç–æ–∫: {selected_obj.total_attempts})")
            
            return selected_word
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞: {e}")
            return None
    
    
    @staticmethod
    def get_difficulty_level(incorrect_count: int) -> Dict[str, int]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫
        
        –õ–æ–≥–∏–∫–∞:
        - incorrect_count == 0: —Ç–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (hard x3)
        - incorrect_count == 1-2: —Å—Ä–µ–¥–Ω–∏–µ –∏ —Å–ª–æ–∂–Ω—ã–µ (medium x1 + hard x2)
        - incorrect_count >= 3: –ª—ë–≥–∫–∏–µ –∏ —Å—Ä–µ–¥–Ω–∏–µ (easy x1 + medium x2) - –ø–æ–º–æ—â—å
        
        Args:
            incorrect_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è —Å–ª–æ–≤–∞
            
        Returns:
            Dict —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–∞–∂–¥–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {'easy': N, 'medium': N, 'hard': N}
        """
        # –ü–ª–∞–Ω 0009: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        difficulty_map = {
            0: {"hard": 3, "medium": 0, "easy": 0},
            1: {"hard": 2, "medium": 1, "easy": 0},
            2: {"hard": 2, "medium": 1, "easy": 0},
        }
        if incorrect_count >= 3:
            return {"easy": 1, "medium": 2, "hard": 0}
        return difficulty_map.get(incorrect_count, {"hard": 3, "medium": 0, "easy": 0})
    
    
    @staticmethod
    def is_session_complete(words: Dict[str, Word]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è (–≤—Å–µ —Å–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã –Ω–∞ 5)
        
        Args:
            words: –°–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤ {text: Word}
            
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã, False –∏–Ω–∞—á–µ
        """
        if not words:
            return True
        
        all_mastered = all(word.is_mastered for word in words.values())
        
        if all_mastered:
            logger.info("üéâ –°–ï–°–°–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê! –í–°–ï –°–õ–û–í–ê –í–´–£–ß–ï–ù–´ –ù–ê 5!")
        
        return all_mastered
    
    
    @staticmethod
    def get_session_progress(words: Dict[str, Word]) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–µ—Å—Å–∏–∏
        
        Returns:
            Dict —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π:
            - mastered: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
            - total: –≤—Å–µ–≥–æ —Å–ª–æ–≤
            - with_errors: —Å–ª–æ–≤–∞ –≥–¥–µ –±—ã–ª–∏ –æ—à–∏–±–∫–∏
            - without_errors: —Å–ª–æ–≤–∞ –≥–¥–µ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫
        """
        try:
            mastered = sum(1 for word in words.values() if word.is_mastered)
            total = len(words)
            with_errors = sum(1 for word in words.values() if word.incorrect_count > 0)
            without_errors = total - with_errors
            
            return {
                "mastered": mastered,
                "total": total,
                "with_errors": with_errors,
                "without_errors": without_errors,
                "remaining": total - mastered
            }
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return {"mastered": 0, "total": 0, "with_errors": 0, "without_errors": 0, "remaining": 0}
