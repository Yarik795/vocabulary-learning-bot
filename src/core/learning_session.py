"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ–±—É—á–∞—é—â–µ–π —Å–µ—Å—Å–∏–∏ (–≠—Ç–∞–ø 6)
–°–µ—Å—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ –≤—Å–µ —Å–ª–æ–≤–∞ –Ω–µ –≤—ã—É—á–µ–Ω—ã –Ω–∞ –æ—Ü–µ–Ω–∫—É "5"
–°–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —Å —É—á—ë—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
"""

import logging
import uuid
from datetime import datetime
from typing import List, Optional, Dict
from pathlib import Path

from config.settings import DATA_DIR, PROGRESS_UPDATE_INTERVAL
from src.core.models import Word, SessionStats
from src.core.adaptive_learning import AdaptiveLearning
from src.utils.file_helpers import save_json, load_json

logger = logging.getLogger(__name__)


class LearningSession:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ–±—É—á–∞—é—â–µ–π —Å–µ—Å—Å–∏–∏ (–≠—Ç–∞–ø 6)
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –°–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –¥–æ –ø–æ–ª–Ω–æ–≥–æ —É—Å–≤–æ–µ–Ω–∏—è (–≤—Å–µ –≤—ã—É—á–µ–Ω—ã –Ω–∞ 5)
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä: —Å–ª–æ–≤–∞ —Å –æ—à–∏–±–∫–∞–º–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–∞—â–µ
    - –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—à–∏–±–æ–∫
    - –ö—Ä–∏—Ç–µ—Ä–∏–π –≤—ã—É—á–µ–Ω–Ω–æ—Å—Ç–∏: 3 –ø–æ–¥—Ä—è–¥ + 75% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ + –º–∏–Ω 3 –ø–æ–ø—ã—Ç–∫–∏
    """
    
    def __init__(self, user_id: int, dict_id: str, dict_name: str, words_list: List[str]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            dict_id: ID —Å–ª–æ–≤–∞—Ä—è
            dict_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
            words_list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        """
        self.user_id = user_id
        self.dict_id = dict_id
        self.dict_name = dict_name
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–µ—Å—Å–∏–∏
        self.session_id = str(uuid.uuid4())[:8]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã Word —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.words: Dict[str, Word] = {
            word: Word(text=word) for word in words_list
        }
        
        # –¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ (–¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)
        self.current_word: Optional[str] = None
        self.total_words_shown = 0  # –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–∫–∞–∑–∞–ª–∏ –ª—é–±–æ–µ —Å–ª–æ–≤–æ (–¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
        self.stats = SessionStats(
            session_id=self.session_id,
            user_id=user_id,
            dict_id=dict_id,
            dict_name=dict_name,
            started_at=datetime.now(),
            total_words=len(words_list)
        )
        
        logger.info(f"‚úÖ AdaptiveLearningSession —Å–æ–∑–¥–∞–Ω–∞: —Å–µ—Å—Å–∏—è={self.session_id}, —Å–ª–æ–≤={len(words_list)}")
    
    
    def get_next_word(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        
        –õ–æ–≥–∏–∫–∞:
        1. –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None (—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
        2. –ò–Ω–∞—á–µ - –≤—ã–±–∏—Ä–∞–µ–º –Ω–µ–≤—ã—É—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
           - –°–ª–æ–≤–∞ —Å –æ—à–∏–±–∫–∞–º–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
           - –°–ª–æ–≤–∞ —Å –≤—ã—Å–æ–∫–∏–º priority_score –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ä–∞–Ω—å—à–µ
        
        Returns:
            –¢–µ–∫—Å—Ç —Å–ª–æ–≤–∞ –∏–ª–∏ None –µ—Å–ª–∏ –≤—Å–µ –≤—ã—É—á–µ–Ω—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è
            if AdaptiveLearning.is_session_complete(self.words):
                logger.info("üéâ –°–ï–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê! –í–°–ï –°–õ–û–í–ê –í–´–£–ß–ï–ù–´ –ù–ê 5!")
                return None
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            next_word = AdaptiveLearning.get_next_word_by_priority(self.words)
            
            if next_word is None:
                logger.info("üéâ –í–°–ï –°–õ–û–í–ê –í–´–£–ß–ï–ù–´ –ù–ê –û–¶–ï–ù–ö–£ 5!")
                return None
            
            self.current_word = next_word
            self.total_words_shown += 1
            
            return next_word
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞: {e}")
            return None
    
    
    def get_current_word(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ (–∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∫–∞–∑–∞–Ω–æ)"""
        return self.current_word
    
    
    def get_word_data(self, word: str) -> Optional[Word]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç Word –ø–æ —Ç–µ–∫—Å—Ç—É
        
        Args:
            word: –¢–µ–∫—Å—Ç —Å–ª–æ–≤–∞
            
        Returns:
            –û–±—ä–µ–∫—Ç Word –∏–ª–∏ None
        """
        return self.words.get(word)
    
    
    def get_difficulty_for_word(self, word: str) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Å–ª–æ–≤–∞
        
        –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫:
        - 0 –æ—à–∏–±–æ–∫: —Ç–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (hard x3)
        - 1-2 –æ—à–∏–±–∫–∏: —Å—Ä–µ–¥–Ω–∏–µ –∏ —Å–ª–æ–∂–Ω—ã–µ (medium x1 + hard x2)
        - 3+ –æ—à–∏–±–æ–∫: –ª—ë–≥–∫–∏–µ –∏ —Å—Ä–µ–¥–Ω–∏–µ (easy x1 + medium x2) - –ø–æ–º–æ—â—å —É—á–µ–Ω–∏–∫—É
        
        Args:
            word: –¢–µ–∫—Å—Ç —Å–ª–æ–≤–∞
            
        Returns:
            Dict: {'easy': N, 'medium': N, 'hard': N}
        """
        try:
            word_obj = self.words.get(word)
            if not word_obj:
                return {"easy": 0, "medium": 0, "hard": 3}
            
            difficulty = AdaptiveLearning.get_difficulty_level(word_obj.incorrect_count)
            logger.debug(f"üéØ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è '{word}' (–æ—à–∏–±–æ–∫: {word_obj.incorrect_count}): {difficulty}")
            
            return difficulty
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
            return {"easy": 0, "medium": 0, "hard": 3}
    
    
    def record_answer(self, word: str, is_correct: bool) -> bool:
        """
        –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        
        Args:
            word: –¢–µ–∫—Å—Ç —Å–ª–æ–≤–∞
            is_correct: True –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            word_obj = self.words.get(word)
            if not word_obj:
                logger.error(f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–µ—Å—Å–∏–∏")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            AdaptiveLearning.update_word_status(word_obj, is_correct)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
            if is_correct:
                self.stats.correct_answers += 1
                logger.debug(f"‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–ª—è —Å–ª–æ–≤–∞ '{word}'")
            else:
                self.stats.incorrect_answers += 1
                logger.debug(f"‚ùå –û—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–ª—è —Å–ª–æ–≤–∞ '{word}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—É—á–µ–Ω–æ –ª–∏ —Å–ª–æ–≤–æ –Ω–∞ 5
            if word_obj.is_mastered:
                if word not in self.stats.words_mastered_list:
                    self.stats.words_mastered_list.append(word)
                    self.stats.words_mastered += 1
                    logger.info(f"‚ú® –°–ª–æ–≤–æ '{word}' –í–´–£–ß–ï–ù–û –ù–ê 5! –û—Å—Ç–∞–ª–æ—Å—å: {len(self.words) - self.stats.words_mastered}")
            
            return True
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return False
    
    
    def is_complete(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è (–≤—Å–µ —Å–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã –Ω–∞ 5)
        
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã
        """
        return AdaptiveLearning.is_session_complete(self.words)
    
    
    def get_mastered_count(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –Ω–∞ –æ—Ü–µ–Ω–∫—É 5
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        """
        return len([w for w in self.words.values() if w.is_mastered])
    
    
    def get_current_position(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤)
        
        Returns:
            –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        """
        return self.total_words_shown
    
    
    def get_progress_percentage(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        
        Returns:
            –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100
        """
        if not self.words:
            return 0
        mastered = self.get_mastered_count()
        return int((mastered / len(self.words)) * 100)
    
    
    def should_show_progress_update(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ PROGRESS_UPDATE_INTERVAL –æ—Ç–≤–µ—Ç–æ–≤
        
        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        """
        total_answers = self.stats.correct_answers + self.stats.incorrect_answers
        return total_answers > 0 and total_answers % PROGRESS_UPDATE_INTERVAL == 0
    
    
    def get_progress_update(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        """
        try:
            progress = AdaptiveLearning.get_session_progress(self.words)
            
            emoji_completion = "‚ñà" * progress["mastered"] + "‚ñë" * progress["remaining"]
            
            total_answers = self.stats.correct_answers + self.stats.incorrect_answers
            success_rate = (self.stats.correct_answers / total_answers * 100) if total_answers > 0 else 0
            
            progress_text = f"""üìä **–ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ô –ü–†–û–ì–†–ï–°–°** üìä

üìö –ü—Ä–æ–≥—Ä–µ—Å—Å: [{emoji_completion}]
‚Ä¢ –í—ã—É—á–µ–Ω–æ: {progress['mastered']}/{progress['total']} —Å–ª–æ–≤
‚Ä¢ –°–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {progress['with_errors']}
‚Ä¢ –°–ª–æ–≤ –±–µ–∑ –æ—à–∏–±–æ–∫: {progress['without_errors']}

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_answers}
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {self.stats.correct_answers}
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {self.stats.incorrect_answers}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%

üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!"""
            
            return progress_text
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
    
    
    def finish_session(self) -> SessionStats:
        """
        –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é –∏ –≤–µ—Ä–Ω—É—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        
        Returns:
            –û–±—ä–µ–∫—Ç SessionStats —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        self.stats.ended_at = datetime.now()
        
        total_answers = self.stats.correct_answers + self.stats.incorrect_answers
        success_rate = (self.stats.correct_answers / total_answers * 100) if total_answers > 0 else 0
        
        logger.info(f"""
        üéâ –°–ï–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:
        ‚Ä¢ ID —Å–µ—Å—Å–∏–∏: {self.session_id}
        ‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {self.stats.total_words}
        ‚Ä¢ –í—ã—É—á–µ–Ω–æ –Ω–∞ 5: {self.stats.words_mastered}
        ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_answers}
        ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {self.stats.correct_answers} ({success_rate:.1f}%)
        ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {self.stats.incorrect_answers}
        ‚Ä¢ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {self.stats.duration_seconds} —Å–µ–∫
        ‚Ä¢ –í—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(self.stats.words_mastered_list)}
        """)
        
        return self.stats
    
    
    def get_summary(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
        
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏—Ç–æ–≥–∞–º–∏
        """
        minutes, seconds = divmod(self.stats.duration_seconds, 60)
        hours, minutes = divmod(minutes, 60)
        
        total_answers = self.stats.correct_answers + self.stats.incorrect_answers
        success_rate = (self.stats.correct_answers / total_answers * 100) if total_answers > 0 else 0
        
        time_str = f"{hours}:{minutes:02d}:{seconds:02d}" if hours > 0 else f"{minutes}:{seconds:02d}"
        
        summary = f"""üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–Æ!** üéâ

–í–°–ï –°–õ–û–í–ê –í–´–£–ß–ï–ù–´ –ù–ê –û–¢–õ–ò–ß–ù–û! üåü

üìä **–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ–≤: {self.stats.total_words}
‚Ä¢ –í—ã—É—á–µ–Ω–æ –Ω–∞ 5: {self.stats.words_mastered}
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_answers}
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {self.stats.correct_answers}
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {self.stats.incorrect_answers}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%
‚Ä¢ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {time_str}

üìö **–í–´–£–ß–ï–ù–ù–´–ï –°–õ–û–í–ê:**
{self._format_mastered_words()}

üí™ **–û–¢–õ–ò–ß–ù–ê–Ø –†–ê–ë–û–¢–ê!** üí™
–¢—ã –ø—Ä–æ–¥–µ–ª–∞–ª –±–æ–ª—å—à—É—é —Ä–∞–±–æ—Ç—É! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"""
        
        return summary
    
    
    def _format_mastered_words(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"""
        try:
            if not self.stats.words_mastered_list:
                return "–ù–µ—Ç"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 —Å–ª–æ–≤–∞ –≤ —Å—Ç—Ä–æ–∫—É
            words = self.stats.words_mastered_list
            lines = []
            for i in range(0, len(words), 3):
                chunk = words[i:i+3]
                lines.append(" ‚Ä¢ " + ", ".join(chunk))
            
            return "\n".join(lines)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤"
