"""
Persistence —Å–ª–æ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫ (–≠—Ç–∞–ø 8)
–ü–†–û–ë–õ–ï–ú–ê #7: –°–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –¥–∏—Å–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–∞
"""

import logging
import json
from pathlib import Path
from typing import Optional
from src.core.learning_session import LearningSession
from src.utils.file_helpers import save_json, load_json
from config.settings import DATA_DIR

logger = logging.getLogger(__name__)


class SessionPersistence:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è"""
    
    SESSIONS_DIR = DATA_DIR / "temp_sessions"
    
    @classmethod
    def _ensure_dir(cls):
        """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        cls.SESSIONS_DIR.mkdir(parents=True, exist_ok=True)
    
    @classmethod
    async def save_session(cls, user_id: int, session: LearningSession) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session: –û–±—ä–µ–∫—Ç LearningSession –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            cls._ensure_dir()
            
            session_file = cls.SESSIONS_DIR / f"{user_id}_{session.session_id}.json"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –≤ JSON
            session_data = {
                'user_id': user_id,
                'session_id': session.session_id,
                'dict_id': session.dict_id,
                'dict_name': session.dict_name,
                'words_list': list(session.words.keys()),           # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
                'current_word': session.current_word,              # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: current_word_index ‚Üí current_word
                'stats': session.stats.model_dump(mode='json') if hasattr(session.stats, 'model_dump') else session.stats.__dict__,
                'words_stats': {                                   # ‚úÖ –í–º–µ—Å—Ç–æ words_progress –±–µ—Ä—ë–º –∏–∑ Word –æ–±—ä–µ–∫—Ç–æ–≤
                    word: {
                        'correct_count': word_obj.correct_count,
                        'incorrect_count': word_obj.incorrect_count,
                        'total_attempts': word_obj.total_attempts,
                        'times_mastered': word_obj.times_mastered,
                        'is_mastered': word_obj.is_mastered,
                        'last_attempted': word_obj.last_attempted.isoformat() if hasattr(word_obj, 'last_attempted') and word_obj.last_attempted else None
                    }
                    for word, word_obj in session.words.items()
                }
            }
            
            save_json(str(session_file), session_data)
            logger.info(f"üíæ –°–µ—Å—Å–∏—è {session.session_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ –¥–∏—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –Ω–∞ –¥–∏—Å–∫: {e}")
            return False
    
    @classmethod
    async def load_session(cls, user_id: int, session_id: str) -> Optional[LearningSession]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è —Å –¥–∏—Å–∫–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_id: ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            LearningSession –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        try:
            cls._ensure_dir()
            
            session_file = cls.SESSIONS_DIR / f"{user_id}_{session_id}.json"
            
            if not session_file.exists():
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_file}")
                return None
            
            session_data = load_json(str(session_file))
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            session = LearningSession(
                user_id=session_data['user_id'],
                dict_id=session_data['dict_id'],
                dict_name=session_data['dict_name'],
                words_list=session_data['words_list']
            )
            
            session.session_id = session_data['session_id']
            session.current_word = session_data.get('current_word')  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: current_word_index ‚Üí current_word
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤ –∏–∑ words_stats
            if 'words_stats' in session_data:  # ‚úÖ –ò—â–µ–º words_stats –≤–º–µ—Å—Ç–æ words_progress
                for word, stats_data in session_data['words_stats'].items():
                    if word in session.words:
                        word_obj = session.words[word]
                        word_obj.correct_count = stats_data.get('correct_count', 0)
                        word_obj.incorrect_count = stats_data.get('incorrect_count', 0)
                        word_obj.total_attempts = stats_data.get('total_attempts', 0)
                        word_obj.times_mastered = stats_data.get('times_mastered', 0)
                        word_obj.is_mastered = stats_data.get('is_mastered', False)
            
            logger.info(f"üìÇ –°–µ—Å—Å–∏—è {session_id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –¥–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return session
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–∏ —Å –¥–∏—Å–∫–∞: {e}")
            return None
    
    @classmethod
    async def delete_session(cls, user_id: int, session_id: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —Å –¥–∏—Å–∫–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_id: ID —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            session_file = cls.SESSIONS_DIR / f"{user_id}_{session_id}.json"
            
            if session_file.exists():
                session_file.unlink()
                logger.info(f"üóëÔ∏è –°–µ—Å—Å–∏—è {session_id} —É–¥–∞–ª–µ–Ω–∞ —Å –¥–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {session_file}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ —Å –¥–∏—Å–∫–∞: {e}")
            return False
    
    @classmethod
    async def load_all_sessions_for_user(cls, user_id: int) -> dict:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {session_id: LearningSession} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        """
        try:
            cls._ensure_dir()
            
            sessions = {}
            pattern = f"{user_id}_*.json"
            
            for session_file in cls.SESSIONS_DIR.glob(pattern):
                try:
                    session_data = load_json(str(session_file))
                    session_id = session_data.get('session_id')
                    
                    if session_id:
                        session = await cls.load_session(user_id, session_id)
                        if session:
                            sessions[session_id] = session
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–∏ {session_file}: {e}")
                    continue
            
            logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sessions)} —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return sessions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π: {e}")
            return {}
