"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ JSON, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
"""

import json
import logging
import time
from pathlib import Path
from typing import Any, Dict, Optional

from config.settings import DATA_DIR


logger = logging.getLogger(__name__)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
TEMP_SESSIONS_DIR = DATA_DIR / "temp_sessions"
SESSION_TIMEOUT = 3600  # 1 —á–∞—Å


# ============================================================================
# –†–ê–ë–û–¢–ê –° JSON –§–ê–ô–õ–ê–ú–ò
# ============================================================================

def save_json(filepath: Path, data: Any) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Args:
        filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        filepath.parent.mkdir(parents=True, exist_ok=True)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        logger.debug(f"üíæ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return True
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JSON: {e}")
        return False


def load_json(filepath: Path, default: Optional[Any] = None) -> Any:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Args:
        filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
    Returns:
        –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ default –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        if not filepath.exists():
            logger.debug(f"‚ö†Ô∏è JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
            return default
        
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        logger.debug(f"üìñ JSON –∑–∞–≥—Ä—É–∂–µ–Ω: {filepath}")
        return data
    
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON {filepath}: {e}")
        return default
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON: {e}")
        return default


# ============================================================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–Ø–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
# ============================================================================

def ensure_sessions_directory():
    """
    –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    """
    TEMP_SESSIONS_DIR.mkdir(parents=True, exist_ok=True)
    logger.debug(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {TEMP_SESSIONS_DIR}")


def save_user_session(user_id: int, session_data: Dict[str, Any]) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON —Ñ–∞–π–ª
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        session_data: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (—Å–ª–æ–≤–∞, timestamp –∏ —Ç.–¥.)
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    ensure_sessions_directory()
    
    # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è TTL
    session_data['timestamp'] = time.time()
    
    session_file = TEMP_SESSIONS_DIR / f"{user_id}.json"
    return save_json(session_file, session_data)


def load_user_session(user_id: int) -> Optional[Dict[str, Any]]:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π TTL
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞, –∏–Ω–∞—á–µ None
    """
    ensure_sessions_directory()
    
    session_file = TEMP_SESSIONS_DIR / f"{user_id}.json"
    session_data = load_json(session_file, default=None)
    
    if session_data is None:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏)
    timestamp = session_data.get('timestamp', 0)
    if time.time() - timestamp > SESSION_TIMEOUT:
        logger.info(f"‚è±Ô∏è –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞ (—Å—Ç–∞—Ä—à–µ {SESSION_TIMEOUT} —Å–µ–∫)")
        delete_user_session(user_id)
        return None
    
    logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–≤–æ–∑—Ä–∞—Å—Ç: {time.time() - timestamp:.0f} —Å–µ–∫)")
    return session_data


def delete_user_session(user_id: int) -> bool:
    """
    –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    session_file = TEMP_SESSIONS_DIR / f"{user_id}.json"
    
    try:
        if session_file.exists():
            session_file.unlink()
            logger.info(f"üóëÔ∏è –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞")
            return True
        return False
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return False


def cleanup_expired_sessions() -> int:
    """
    –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏—Å—Ç—ë–∫—à–∏–µ —Å–µ—Å—Å–∏–∏ (–¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã)
    
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    """
    ensure_sessions_directory()
    
    deleted_count = 0
    current_time = time.time()
    
    try:
        for session_file in TEMP_SESSIONS_DIR.glob("*.json"):
            try:
                session_data = load_json(session_file, default=None)
                if session_data:
                    timestamp = session_data.get('timestamp', 0)
                    if current_time - timestamp > SESSION_TIMEOUT:
                        session_file.unlink()
                        deleted_count += 1
                        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∏—Å—Ç—ë–∫—à–∞—è —Å–µ—Å—Å–∏—è: {session_file.name}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏ {session_file.name}: {e}")
        
        if deleted_count > 0:
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∏—Å—Ç—ë–∫—à–∏—Ö —Å–µ—Å—Å–∏–π")
        
        return deleted_count
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–π: {e}")
        return 0


# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

def generate_unique_id() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID (–¥–ª—è —Å–ª–æ–≤–∞—Ä–µ–π –∏ —Ç.–¥.)
    
    Returns:
        –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ timestamp
    """
    import uuid
    return str(uuid.uuid4())[:8]


def ensure_user_directories(user_id: int):
    """
    –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_dir = DATA_DIR / "users" / str(user_id)
    dictionaries_dir = user_dir / "dictionaries"
    sessions_dir = user_dir / "sessions"
    
    dictionaries_dir.mkdir(parents=True, exist_ok=True)
    sessions_dir.mkdir(parents=True, exist_ok=True)
    
    logger.debug(f"‚úÖ –ü–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω—ã")
