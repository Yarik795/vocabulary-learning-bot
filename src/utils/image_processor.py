"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Vision API
"""

import base64
import logging
from io import BytesIO
from typing import Tuple

from PIL import Image, ImageEnhance, ImageOps

from config.settings import MAX_FILE_SIZE


logger = logging.getLogger(__name__)


def validate_image(image_bytes: bytes) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç, —Ä–∞–∑–º–µ—Ä)
    
    Args:
        image_bytes: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if len(image_bytes) > MAX_FILE_SIZE:
        error_msg = f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {len(image_bytes) / (1024*1024):.1f} –ú–ë (–º–∞–∫—Å–∏–º—É–º {MAX_FILE_SIZE / (1024*1024):.0f} –ú–ë)"
        logger.warning(error_msg)
        return False, error_msg
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        image = Image.open(BytesIO(image_bytes))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        if image.format not in ['JPEG', 'PNG', 'GIF', 'WEBP']:
            error_msg = f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {image.format}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPEG, PNG, GIF –∏–ª–∏ WebP"
            logger.warning(error_msg)
            return False, error_msg
        
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        image.verify()
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ: {image.format} ({image.width}x{image.height})")
        return True, ""
    
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        logger.error(error_msg)
        return False, error_msg


def preprocess_image(image_bytes: bytes, max_width: int = 2048) -> bytes:
    """
    –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:
    - –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
    - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ RGB –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
    
    Args:
        image_bytes: –ò—Å—Ö–æ–¥–Ω—ã–µ –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        max_width: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = Image.open(BytesIO(image_bytes))
        logger.debug(f"üì∏ –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image.format} {image.size}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è PNG —Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º –∏ —Ç.–¥.)
        if image.mode in ['RGBA', 'LA', 'P']:
            # –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            background = Image.new('RGB', image.size, (255, 255, 255))
            if image.mode == 'P':
                image = image.convert('RGBA')
            background.paste(image, mask=image.split()[-1] if image.mode in ['RGBA', 'LA'] else None)
            image = background
            logger.debug("üé® –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ RGB")
        elif image.mode != 'RGB':
            image = image.convert('RGB')
            logger.debug(f"üé® –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ RGB (–±—ã–ª–æ {image.mode})")
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ - –Ω–µ –±–æ–ª—å—à–µ max_width
        if image.width > max_width:
            ratio = max_width / image.width
            new_height = int(image.height * ratio)
            image = image.resize((max_width, new_height), Image.Resampling.LANCZOS)
            logger.debug(f"üìè –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ {image.size}")
        
        # –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(1.3)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –Ω–∞ 30%
        logger.debug("üìä –ö–æ–Ω—Ç—Ä–∞—Å—Ç –ø–æ–≤—ã—à–µ–Ω –Ω–∞ 30%")
        
        # –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
        enhancer = ImageEnhance.Sharpness(image)
        image = enhancer.enhance(1.2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å –Ω–∞ 20%
        logger.debug("‚úÇÔ∏è –†–µ–∑–∫–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∞ –Ω–∞ 20%")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JPEG (—Ö–æ—Ä–æ—à–∏–π –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º)
        output = BytesIO()
        image.save(output, format='JPEG', quality=90, optimize=True)
        output_bytes = output.getvalue()
        
        logger.info(f"‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(image_bytes)} ‚Üí {len(output_bytes)} –±–∞–π—Ç")
        return output_bytes
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        logger.info("‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return image_bytes


def convert_to_base64(image_bytes: bytes) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ API
    
    Args:
        image_bytes: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        Base64-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        base64_str = base64.b64encode(image_bytes).decode('utf-8')
        logger.debug(f"üîê –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –≤ base64 ({len(base64_str)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return base64_str
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ base64: {e}")
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")


def resize_image(image_bytes: bytes, max_width: int = 1024, max_height: int = 1024) -> bytes:
    """
    –ü—Ä–æ—Å—Ç–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    
    Args:
        image_bytes: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        max_width: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        max_height: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        
    Returns:
        –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        image = Image.open(BytesIO(image_bytes))
        image.thumbnail((max_width, max_height), Image.Resampling.LANCZOS)
        
        output = BytesIO()
        image.save(output, format='JPEG', quality=90)
        return output.getvalue()
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞: {e}")
        return image_bytes
