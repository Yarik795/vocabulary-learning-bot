"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–ª–æ–≤ –ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
"""

import logging
import re
from typing import List, Set

from config.settings import MAX_WORDS_IN_DICTIONARY


logger = logging.getLogger(__name__)


# –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –æ—à–∏–±–æ—á–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã)
COMMON_ARTIFACTS = {
    '–ø–æ', '–∏', '–≤', '–≤–æ', '–Ω–∞', '–Ω–µ', '–∫', '—Å–æ', '—Å–æ', '–∑–∞', '—Å', '—É', '–æ–Ω', '–æ–Ω–∞',
    '–æ–Ω–æ', '–æ–Ω–∏', '—ç—Ç–æ', '—Ç–∞–∫', '—á—Ç–æ', '–∫–∞–∫', '–∞', '–±', '–≥', '–¥', '–µ', '—ë', '–∂',
    '–∑', '–π', '–ª', '–º', '–Ω', '—Ä', '—Ö', '—Ü', '—á', '—à', '—â', '—Ç', '—ä', '—å', '—ç',
    '–ø', '—Ñ', '–±', '—é', '—è', '‚Äî', '‚Äì', '-', '_',
    # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞)
    '–º—ã', '–≤—ã', '—Ç—ã', '—è', '–æ–Ω', '–æ–Ω–∞', '–æ–Ω–æ', '–æ–Ω–∏', '–≤–∞—Å', '–Ω–∞—Å', '–≤–∞–º', '–Ω–∞–º',
    '—Ç–æ—Ç', '—ç—Ç–∞', '—ç—Ç–∏', '—Ç–æ–≥–æ', '—Ç–æ–π', '—Ç–æ–≥–æ', '—Ç–æ–º', '—Ç–æ–π', '—Ç–æ–π',
    '–±–µ–∑', '–¥–ª—è', '–ø—Ä–∏', '–ø—Ä–æ', '–Ω–∞–¥', '–ø–æ–¥', '–µ—Å–ª–∏', '—Ç–æ', '–ª–∏–±–æ',
    '–≤—ã—Ö–æ–¥', '–≤—ã—Ö–æ–¥–Ω—ã—Ö', '–¥–æ—Å—Ç–∞–≤–∫', '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ', '—á–∞—Å—ã', '—Ä–∞–±–æ—Ç', '—Ä–∞–±–æ—Ç—ã',
    '–º–∞–≥–∞–∑–∏–Ω', '–∏–Ω—Å—Ç–∞–≥—Ä–∞–º', '–æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫', '—Ñ–æ—Ç–æ', '—Å–ø–∏—Å–æ–∫', '—Å–ª–æ–≤', '—Å–ª–æ–≤–∞',
    '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '—Ç–µ–∫—Å—Ç', '–ª–∏—Å—Ç', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞',
    '–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ', '–ø—Ä–∏–º–µ—á–∞–Ω–∏—è', '–ø—Ä–∏–º', '–ø—Ä–∏–º', '–∏–∑–º', '–≤—Å–µ', '–ø–æ–ª–Ω–æ—Å—Ç—å—é'
}

# –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
ARTIFACTS_SYMBOLS = {',', '.', '!', '?', ':', ';', '(', ')', '[', ']', '{', '}', '"', "'", '/', '\\'}


def clean_word(word: str) -> str:
    """
    –û—á–∏—Å—Ç–∏—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
    
    Args:
        word: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ (–∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ)
    """
    if not word:
        return ""
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    word = word.strip()
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–ª–æ–≤–∞—Ö
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –¥–µ—Ñ–∏—Å –∏ –º—è–≥–∫–∏–π/—Ç–≤—ë—Ä–¥—ã–π –∑–Ω–∞–∫
    word = re.sub(r'[^–∞-—è—ë–ê-–Ø–Å\-—ä—å–™–¨]', '', word)
    
    # –ó–∞–º–µ–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–µ—Ñ–∏—Å–æ–≤ –Ω–∞ –æ–¥–∏–Ω
    word = re.sub(r'-+', '-', word)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ—Ñ–∏—Å–∞ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    word = word.strip('-')
    
    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
    word = word.lower()
    
    return word


def validate_word(word: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
    
    Args:
        word: –°–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ —Å–ª–æ–≤–æ –≤–∞–ª–∏–¥–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    # –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    if not word or len(word) < 2:
        return False
    
    # –°–ª–æ–≤–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º (–æ–±—ã—á–Ω–æ —Å–ª–æ–≤–∞—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ < 20 –±—É–∫–≤)
    if len(word) > 30:
        logger.debug(f"‚ö†Ô∏è –°–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {word} ({len(word)} –±—É–∫–≤)")
        return False
    
    # –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã (–∏ –¥–µ—Ñ–∏—Å/—ä/—å)
    if not re.match(r'^[–∞-—è—ë—ä—å\-]+$', word):
        logger.debug(f"‚ö†Ô∏è –°–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {word}")
        return False
    
    # –°–ª–æ–≤–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ–π –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –±—É–∫–≤–æ–π
    if len(set(word.replace('-', ''))) == 1:
        logger.debug(f"‚ö†Ô∏è –°–ª–æ–≤–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–¥–Ω–æ–π –±—É–∫–≤—ã: {word}")
        return False
    
    # –°–ª–æ–≤–æ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (—á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è)
    if word in COMMON_ARTIFACTS:
        logger.debug(f"‚ö†Ô∏è –°–ª–æ–≤–æ - –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {word}")
        return False
    
    return True


def clean_words_list(words: List[str]) -> List[str]:
    """
    –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–ª–æ–≤
    
    Args:
        words: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–ª–æ–≤
    """
    cleaned: Set[str] = set()
    
    for word in words:
        # –û—á–∏—Å—Ç–∫–∞ —Å–ª–æ–≤–∞
        cleaned_word = clean_word(word)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        if validate_word(cleaned_word):
            cleaned.add(cleaned_word)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    result = sorted(list(cleaned))
    
    logger.info(f"üìù –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤: {len(words)} ‚Üí {len(result)} (–æ—á–∏—â–µ–Ω–æ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
    if len(result) > MAX_WORDS_IN_DICTIONARY:
        logger.warning(f"‚ö†Ô∏è –°–ª–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –º–∞–∫—Å–∏–º—É–º ({len(result)} > {MAX_WORDS_IN_DICTIONARY})")
        result = result[:MAX_WORDS_IN_DICTIONARY]
        logger.info(f"‚úÇÔ∏è –û–±—Ä–µ–∑–∞–Ω–æ –¥–æ {len(result)} —Å–ª–æ–≤")
    
    return result


def parse_recognized_text(text: str) -> List[str]:
    """
    –ü–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π Vision API, –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
    
    Args:
        text: –¢–µ–∫—Å—Ç —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (–æ–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
        
    Returns:
        –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    """
    # –†–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –∑–∞–ø—è—Ç—ã–º
    lines = text.split('\n')
    words = []
    
    for line in lines:
        # –†–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ –∑–∞–ø—è—Ç—ã–º –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        for part in line.split(','):
            part = part.strip()
            if part:
                words.append(part)
    
    logger.info(f"üîç –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ {len(words)} —Å–ª–æ–≤ –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
    logger.debug(f"üìã –°–ª–æ–≤–∞ –î–û –æ—á–∏—Å—Ç–∫–∏: {words}")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
    cleaned = clean_words_list(words)
    
    logger.info(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(cleaned)} —Å–ª–æ–≤")
    logger.debug(f"üìã –°–ª–æ–≤–∞ –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏: {cleaned}")
    
    return cleaned


def format_words_for_display(words: List[str]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        words: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not words:
        return "‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    formatted = "üìö –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n\n"
    for i, word in enumerate(words, 1):
        formatted += f"{i}. {word}\n"
    
    formatted += f"\n‚úÖ –í—Å–µ–≥–æ: {len(words)} —Å–ª–æ–≤"
    
    return formatted


def validate_words_count(words: List[str]) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ (–Ω–µ –ø—É—Å—Ç–æ, –Ω–µ –±–æ–ª–µ–µ –º–∞–∫—Å–∏–º—É–º–∞)
    
    Args:
        words: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    if not words:
        return False, "‚ùå –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç"
    
    if len(words) > MAX_WORDS_IN_DICTIONARY:
        return False, f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ª–æ–≤: {len(words)} (–º–∞–∫—Å–∏–º—É–º {MAX_WORDS_IN_DICTIONARY})"
    
    if len(words) < 2:
        return False, "‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞"
    
    return True, f"‚úÖ {len(words)} —Å–ª–æ–≤ (–≤ –ø–æ—Ä—è–¥–∫–µ)"
