"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–ª—è –≤—Å–µ—Ö API (–≠—Ç–∞–ø 8)
–í–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É Vision API, TTS API, LLM –æ—à–∏–±–æ–∫ –∏ edge cases
"""

import logging
from typing import Optional, List
import asyncio

logger = logging.getLogger(__name__)


class APIErrorHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ API —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏"""
    
    @staticmethod
    async def handle_vision_error(error: Exception, context: dict = None) -> dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Vision API (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)
        
        Args:
            error: Exception –∏–∑ Vision Service
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        error_str = str(error).lower()
        logger.error(f"‚ùå Vision API –æ—à–∏–±–∫–∞: {error}")
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫
        if "timeout" in error_str or "request timeout" in error_str:
            return {
                'user_message': """‚ùå **–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞**

–°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. 

**–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å:**
1Ô∏è‚É£ –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
2Ô∏è‚É£ –£–±–µ–¥–∏—Å—å —á—Ç–æ —Ñ–æ—Ç–æ —á—ë—Ç–∫–æ–µ –∏ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–æ
3Ô∏è‚É£ –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π –≤ –¥—Ä—É–≥–æ–º —Å–ª–æ–≤–∞—Ä–µ""",
                'error_code': 'VISION_TIMEOUT',
                'retry_allowed': True
            }
        
        elif "invalid" in error_str or "bad request" in error_str or "400" in error_str:
            return {
                'user_message': """‚ùå **–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º**

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**
‚úÖ –ß—ë—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –±–µ–ª–æ–º/—Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ
‚úÖ –•–æ—Ä–æ—à–∏–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (–Ω–µ –º–µ–Ω—å—à–µ 12pt)
‚úÖ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ (–±–µ–∑ —Ç–µ–Ω–µ–π)
‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –º–µ–Ω—å—à–µ 10MB
‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥—è—Ç: —Ä–∞–∑–º—ã—Ç—ã–µ, –∫–æ—Å—ã–µ, —Ç—ë–º–Ω—ã–µ —Ñ–æ—Ç–æ

**–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–∞–º–µ—Ä—É, –∞ –Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç!""",
                'error_code': 'VISION_INVALID_IMAGE',
                'retry_allowed': True
            }
        
        elif "429" in error_str or "rate limit" in error_str:
            return {
                'user_message': """‚è≥ **–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤**

–¢—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Ñ–æ—Ç–æ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. 

**–ü–æ–¥–æ–∂–¥–∏ 30 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞** ‚è∞""",
                'error_code': 'VISION_RATE_LIMIT',
                'retry_allowed': True,
                'retry_delay': 30
            }
        
        else:
            return {
                'user_message': """‚ùå **–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞**

–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. 

**–ü–æ–ø—Ä–æ–±—É–π:**
1Ô∏è‚É£ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –≤ –ª—É—á—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
3Ô∏è‚É£ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ - –ø–æ–¥–æ–∂–¥–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ""",
                'error_code': 'VISION_UNKNOWN',
                'retry_allowed': True
            }
    
    @staticmethod
    async def handle_tts_error(word: str, error: Exception) -> dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ TTS API (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ)
        
        Args:
            word: –°–ª–æ–≤–æ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ
            error: Exception –∏–∑ TTS Service
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ fallback
        """
        error_str = str(error).lower()
        logger.error(f"‚ùå TTS API –æ—à–∏–±–∫–∞ –¥–ª—è —Å–ª–æ–≤–∞ '{word}': {error}")
        
        if "timeout" in error_str:
            return {
                'user_message': f"üîä –ê—É–¥–∏–æ –¥–ª—è '{word}' –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è... (–º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–∑ –∑–≤—É–∫–∞)",
                'error_code': 'TTS_TIMEOUT',
                'fallback_action': 'show_word_without_audio'
            }
        
        elif "429" in error_str or "rate limit" in error_str:
            return {
                'user_message': f"üîä –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—É–¥–∏–æ –¥–ª—è '{word}'",
                'error_code': 'TTS_RATE_LIMIT',
                'fallback_action': 'show_word_without_audio'
            }
        
        else:
            return {
                'user_message': f"üîä –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –¥–ª—è '{word}' (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∑–≤—É–∫–∞)",
                'error_code': 'TTS_UNKNOWN',
                'fallback_action': 'show_word_without_audio'
            }
    
    @staticmethod
    async def handle_variant_generation_error(words: List[str], error: Exception) -> dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (LLM API)
        
        Args:
            words: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —É–¥–∞–ª–∞—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            error: Exception –∏–∑ Variant Generator Service
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ fallback
        """
        error_str = str(error).lower()
        word_count = len(words) if isinstance(words, list) else 1
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è {word_count} —Å–ª–æ–≤: {error}")
        
        if "timeout" in error_str:
            return {
                'user_message': f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã... (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)",
                'error_code': 'VARIANT_TIMEOUT',
                'fallback_action': 'use_cached_or_algorithmic',
                'retry_allowed': True,
                'retry_delay': 5
            }
        
        elif "429" in error_str or "rate limit" in error_str:
            return {
                'user_message': f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–¥–æ–∂–¥–∏...",
                'error_code': 'VARIANT_RATE_LIMIT',
                'fallback_action': 'use_cached_or_algorithmic',
                'retry_allowed': True,
                'retry_delay': 10
            }
        
        elif "invalid" in error_str or "parse" in error_str:
            return {
                'user_message': f"‚öôÔ∏è –ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã...",
                'error_code': 'VARIANT_PARSE_ERROR',
                'fallback_action': 'use_algorithmic_generation'
            }
        
        else:
            return {
                'user_message': f"‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º...",
                'error_code': 'VARIANT_UNKNOWN',
                'fallback_action': 'use_algorithmic_generation'
            }


class ImageValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    @staticmethod
    def validate_image_size(file_size_bytes: int, max_size_mb: int = 10) -> tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            file_size_bytes: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
            max_size_mb: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –ú–ë
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–Ω–æ –ª–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        max_bytes = max_size_mb * 1024 * 1024
        
        if file_size_bytes > max_bytes:
            size_mb = file_size_bytes / (1024 * 1024)
            return False, f"‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({size_mb:.1f}MB, –º–∞–∫—Å–∏–º—É–º {max_size_mb}MB)"
        
        if file_size_bytes < 1024:  # –ú–µ–Ω—å—à–µ 1KB
            return False, "‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ)"
        
        return True, None
    
    @staticmethod
    def validate_image_content(width: int, height: int, min_size: int = 100) -> tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            width: –®–∏—Ä–∏–Ω–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            height: –í—ã—Å–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            min_size: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–Ω–æ –ª–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        if width < min_size or height < min_size:
            return False, f"‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ({width}x{height}, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_size}x{min_size})"
        
        return True, None
    
    @staticmethod
    def validate_file_type(mime_type: str) -> tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        
        Args:
            mime_type: MIME —Ç–∏–ø —Ñ–∞–π–ª–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–Ω–æ –ª–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        allowed_types = ['image/jpeg', 'image/png', 'image/webp']
        
        if mime_type not in allowed_types:
            return False, f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç ({mime_type}). –ò—Å–ø–æ–ª—å–∑—É–π JPEG, PNG –∏–ª–∏ WebP"
        
        return True, None


class EdgeCaseHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    
    @staticmethod
    def validate_words_count(words: List[str], max_words: int = 50, min_words: int = 1) -> tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ
        
        Args:
            words: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤
            max_words: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
            min_words: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–Ω–æ –ª–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        word_count = len(words)
        
        if word_count < min_words:
            return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ ({word_count}, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_words})"
        
        if word_count > max_words:
            return False, f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ª–æ–≤ ({word_count}, –º–∞–∫—Å–∏–º—É–º {max_words})"
        
        return True, None
    
    @staticmethod
    def validate_word_content(word: str) -> tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–ª–æ–≤–∞
        
        Args:
            word: –°–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–Ω–æ –ª–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        if not word or len(word.strip()) == 0:
            return False, "‚ùå –ü—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ"
        
        if len(word) > 50:
            return False, "‚ùå –°–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)"
        
        if len(word) < 2:
            return False, "‚ùå –°–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)"
        
        return True, None


def get_user_friendly_error_message(error_code: str, context: dict = None) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ –∫–æ–¥—É
    
    Args:
        error_code: –ö–æ–¥ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'VISION_TIMEOUT')
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    messages = {
        'VISION_TIMEOUT': "‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏...",
        'VISION_INVALID_IMAGE': "üì∏ –§–æ—Ç–æ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª–µ–µ —á—ë—Ç–∫—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.",
        'VISION_RATE_LIMIT': "‚ö° –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.",
        'TTS_TIMEOUT': "üîä –ó–≤—É–∫ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è... –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞—É–¥–∏–æ.",
        'TTS_RATE_LIMIT': "‚è≥ –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–≤—É–∫—É. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—á–∏—Ç—å —Å–ª–æ–≤–∞.",
        'VARIANT_TIMEOUT': "‚öôÔ∏è –í–∞—Ä–∏–∞–Ω—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ...",
        'VARIANT_RATE_LIMIT': "‚è≥ API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–¥–æ–∂–¥–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
        'VARIANT_PARSE_ERROR': "‚öôÔ∏è –ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...",
        'VARIANT_UNKNOWN': "‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã...",
    }
    
    return messages.get(error_code, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
