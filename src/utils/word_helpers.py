"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ–≤–∞–º–∏: —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
"""

import hashlib
import random
import logging
from typing import List, Tuple


logger = logging.getLogger(__name__)


# ============================================================================
# –•–ï–®–ò–†–û–í–ê–ù–ò–ï –°–õ–û–í
# ============================================================================

def get_word_hash(word: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à –¥–ª—è —Å–ª–æ–≤–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∫—ç—à–∞
    
    Args:
        word: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ
        
    Returns:
        –•–µ—à —Å–ª–æ–≤–∞ (8 —Å–∏–º–≤–æ–ª–æ–≤)
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–æ–≤–æ: –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
    normalized = word.lower().strip()
    
    # –°–æ–∑–¥–∞–µ–º MD5 —Ö–µ—à
    hash_obj = hashlib.md5(normalized.encode('utf-8'))
    hash_hex = hash_obj.hexdigest()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
    return hash_hex[:8]


def get_words_hashes(words: List[str]) -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ö–µ—à–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
    
    Args:
        words: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å {—Å–ª–æ–≤–æ: —Ö–µ—à}
    """
    return {word: get_word_hash(word) for word in words}


# ============================================================================
# –ü–ï–†–ï–ú–ï–®–ò–í–ê–ù–ò–ï –í–ê–†–ò–ê–ù–¢–û–í
# ============================================================================

def shuffle_variants(correct_word: str, wrong_variants: List[str]) -> List[str]:
    """
    –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    
    Args:
        correct_word: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
        wrong_variants: –°–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–æ–±—ã—á–Ω–æ 3 —à—Ç—É–∫–∏)
        
    Returns:
        –°–ø–∏—Å–æ–∫ –∏–∑ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
    """
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    all_variants = [correct_word] + wrong_variants
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    random.shuffle(all_variants)
    
    logger.debug(f"üîÄ –ü–µ—Ä–µ–º–µ—à–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–ª–æ–≤–∞ '{correct_word}'")
    
    return all_variants


def get_correct_variant_index(variants: List[str], correct_word: str) -> int:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
    
    Args:
        variants: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        correct_word: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
        
    Returns:
        –ò–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (0-3)
    """
    try:
        return variants.index(correct_word)
    except ValueError:
        logger.error(f"‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ '{correct_word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö: {variants}")
        return -1


# ============================================================================
# –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò –í–ê–õ–ò–î–ê–¶–ò–Ø
# ============================================================================

def is_russian_word(word: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–ª–æ–≤–æ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å
    
    Args:
        word: –°–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ —ç—Ç–æ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ, False –∏–Ω–∞—á–µ
    """
    if not word:
        return False
    
    # –†—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã: –ê-–Ø, –∞-—è, —ë, –Å
    valid_chars = set('–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è-')
    
    return all(c in valid_chars for c in word)


def validate_variants_uniqueness(variants: List[str], original_word: str) -> Tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã –∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    
    Args:
        variants: –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (easy + medium + hard = 12 —à—Ç—É–∫)
        original_word: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
        
    Returns:
        (True, "") –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω–æ, (False, –ø—Ä–∏—á–∏–Ω–∞) –µ—Å–ª–∏ –Ω–µ—Ç
    """
    if not variants:
        return False, "–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
    
    if len(variants) != 12:
        return False, f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(variants)}, –æ–∂–∏–¥–∞–µ—Ç—Å—è 12"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    unique_variants = set(variants)
    if len(unique_variants) != len(variants):
        duplicates = [v for v in variants if variants.count(v) > 1]
        return False, f"–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã: {set(duplicates)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    if original_word.lower() in [v.lower() for v in variants]:
        return False, f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä—É—Å—Å–∫–∏–µ
    invalid_variants = [v for v in variants if not is_russian_word(v)]
    if invalid_variants:
        return False, f"–ù–µ —Ä—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {invalid_variants}"
    
    return True, ""


def validate_variant_structure(variants_list: list, original_word: str) -> Tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ø–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    
    Args:
        variants_list: –°–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —à—Ç—É–∫–∏)
        original_word: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
        
    Returns:
        (True, "") –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, (False, –ø—Ä–∏—á–∏–Ω–∞) –∏–Ω–∞—á–µ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
    if not isinstance(variants_list, list):
        return False, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {type(variants_list)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if len(variants_list) != 3:
        return False, f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(variants_list)}, –æ–∂–∏–¥–∞–µ—Ç—Å—è 3"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
    for i, variant in enumerate(variants_list):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if not isinstance(variant, str):
            return False, f"–í–∞—Ä–∏–∞–Ω—Ç {i+1} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: {type(variant)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not variant.strip():
            return False, f"–í–∞—Ä–∏–∞–Ω—Ç {i+1} –ø—É—Å—Ç–æ–π"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        if variant.lower() == original_word.lower():
            return False, f"–í–∞—Ä–∏–∞–Ω—Ç {i+1} —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ
        if not is_russian_word(variant):
            return False, f"–í–∞—Ä–∏–∞–Ω—Ç {i+1} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ-—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã: '{variant}'"
    
    return True, ""
