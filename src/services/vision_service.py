"""
–°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Vision API
"""

import logging
from typing import List

from config.prompts import VISION_PROMPT
from src.utils.image_processor import validate_image, preprocess_image, convert_to_base64
from src.utils.validators import parse_recognized_text
from src.services.openrouter_client import OpenRouterClient


logger = logging.getLogger(__name__)


class VisionService:
    """
    –°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ OpenRouter Vision API
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Vision"""
        logger.info("üëÅÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VisionService...")
        try:
            self.client = OpenRouterClient()
            logger.info("üëÅÔ∏è VisionService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VisionService: {e}")
            raise
    
    async def recognize_text(self, image_bytes: bytes) -> List[str]:
        """
        –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        
        Args:
            image_bytes: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
            
        Raises:
            ValueError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        """
        logger.info("üì∏ –ù–∞—á–∞–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        is_valid, error_msg = validate_image(image_bytes)
        if not is_valid:
            logger.error(error_msg)
            raise ValueError(error_msg)
        
        # 2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞, —Ä–∞–∑–º–µ—Ä –∏ —Ç.–¥.)
        logger.debug("üîß –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        processed_image = preprocess_image(image_bytes)
        
        # 3. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64 –¥–ª—è API
        logger.debug("üîê –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64...")
        image_base64 = convert_to_base64(processed_image)
        
        # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Vision API
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Vision API...")
        try:
            response_text = await self.client.vision_request(
                image_base64=image_base64,
                prompt=VISION_PROMPT
            )
            logger.info(f"üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ({len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Vision API: {e}")
            raise ValueError(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
        
        # 5. –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        logger.debug("üîç –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞...")
        logger.info(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç Vision API:\n{response_text}")
        words = parse_recognized_text(response_text)
        
        if not words:
            logger.warning("‚ö†Ô∏è –°–ª–æ–≤–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            raise ValueError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ª–æ–≤–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤.")
        
        logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(words)} —Å–ª–æ–≤")
        logger.debug(f"–°–ª–æ–≤–∞: {words}")
        
        return words
    
    async def recognize_text_with_fallback(self, image_bytes: bytes, max_retries: int = 2) -> List[str]:
        """
        –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        Args:
            image_bytes: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
            
        Raises:
            ValueError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        """
        for attempt in range(max_retries):
            try:
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è {attempt + 1}/{max_retries}...")
                words = await self.recognize_text(image_bytes)
                return words
            except ValueError as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt == max_retries - 1:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                    raise
        
        raise ValueError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
