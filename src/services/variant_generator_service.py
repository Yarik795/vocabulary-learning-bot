"""
–°–µ—Ä–≤–∏—Å –¥–ª—è batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–≤
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç OpenRouter API –¥–ª—è LLM –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
"""

import json
import logging
import asyncio
from pathlib import Path
from typing import List, Dict, Tuple, Optional

from config.settings import VARIANTS_CACHE_DIR, VARIANTS_COUNT
from config.models import VARIANT_GENERATION_MODEL
from config.prompts import (
    get_variant_generation_batch_prompt,
    get_variant_generation_single_prompt,
    VARIANT_GENERATION_SYSTEM_PROMPT
)
from src.services.openrouter_client import OpenRouterClient
from src.utils.file_helpers import save_json, load_json
from src.utils.word_helpers import (
    get_word_hash,
    get_words_hashes,
    validate_variant_structure,
    is_russian_word
)


logger = logging.getLogger(__name__)


class VariantGeneratorService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–≤
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - Batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º)
    - Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ data/variants_cache/
    - –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.client = OpenRouterClient()
        self.cache_dir = VARIANTS_CACHE_DIR
        self.cache_dir.mkdir(parents=True, exist_ok=True)
        logger.info(f"‚úÖ VariantGeneratorService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   –ö—ç—à –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.cache_dir}")
    
    # ========================================================================
    # BATCH-–ì–ï–ù–ï–†–ê–¶–ò–Ø –í–ê–†–ò–ê–ù–¢–û–í (–æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º)
    # ========================================================================
    
    async def generate_variants_batch(self, words_list: List[str]) -> Dict[str, Dict]:
        """
        Batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ LLM
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–≤
        2. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ cached_words –∏ uncached_words
        3. Batch-–∑–∞–ø—Ä–æ—Å –∫ OpenRouter –¥–ª—è uncached_words
        4. –ü–∞—Ä—Å–∏–Ω–≥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à (–ø–æ —Ñ–∞–π–ª—É –Ω–∞ —Å–ª–æ–≤–æ)
        6. –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        
        Args:
            words_list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {—Å–ª–æ–≤–æ: {easy: [...], medium: [...], hard: [...]}}
        """
        logger.info(f"üîÑ BATCH-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è {len(words_list)} —Å–ª–æ–≤")
        
        if not words_list:
            logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤")
            return {}
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–≤
        logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–≤...")
        cached_variants = self._load_cached_variants(words_list)
        cached_words = set(cached_variants.keys())
        uncached_words = [w for w in words_list if w not in cached_words]
        
        logger.debug(f"   üìä –í—Å–µ–≥–æ —Å–ª–æ–≤: {len(words_list)}")
        logger.debug(f"   ‚úÖ –ò–∑ –∫—ç—à–∞: {len(cached_words)}")
        logger.debug(f"   ‚è≥ –ù—É–∂–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {len(uncached_words)}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –∏–∑ –∫—ç—à–∞
        if not uncached_words:
            logger.info(f"‚úÖ –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–∂–µ –≤ –∫—ç—à–µ! –í–æ–∑–≤—Ä–∞—â–∞—é –∏–∑ –∫—ç—à–∞...")
            return cached_variants
        
        # –®–∞–≥ 2-3: Batch-–∑–∞–ø—Ä–æ—Å –∫ OpenRouter –¥–ª—è uncached_words
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é batch-–∑–∞–ø—Ä–æ—Å –¥–ª—è {len(uncached_words)} —Å–ª–æ–≤...")
        batch_response = await self._request_batch_variants(uncached_words)
        
        if not batch_response:
            logger.error(f"‚ùå Batch-–∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞–∫ fallback
            logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è {len(uncached_words)} —Å–ª–æ–≤...")
            for word in uncached_words:
                try:
                    variants = self._algorithmic_generation(word)
                    if variants:
                        self._save_variants_to_cache(word, variants)
                        logger.info(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è '{word}'")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ '{word}': {e}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            cached_variants.update(self._load_cached_variants(uncached_words))
            logger.info(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(cached_variants)}")
            return cached_variants
        
        # –®–∞–≥ 4: –ü–∞—Ä—Å–∏–Ω–≥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        logger.debug(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è batch-–æ—Ç–≤–µ—Ç–∞...")
        parsed_variants, validation_errors = self._parse_and_validate_batch_response(
            batch_response, uncached_words
        )
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - fallback
        if validation_errors:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {len(validation_errors)} —Å–ª–æ–≤: {validation_errors}")
            await self._fallback_generation_for_failed_words(validation_errors)
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ fallback
            fallback_variants = self._load_cached_variants(validation_errors)
            if fallback_variants:
                parsed_variants.update(fallback_variants)
                logger.info(f"‚úÖ Fallback –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {len(fallback_variants)} —Å–ª–æ–≤")
            else:
                logger.warning(f"‚ö†Ô∏è Fallback –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {len(validation_errors)} —Å–ª–æ–≤")
        
        # –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
        logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –∫—ç—à...")
        for word, variants in parsed_variants.items():
            self._save_variants_to_cache(word, variants)
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è {len(parsed_variants)} —Å–ª–æ–≤")
        
        # –®–∞–≥ 6: –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å —É–∂–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
        result = {**cached_variants, **parsed_variants}
        
        logger.info(f"‚úÖ Batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(result)}")
        return result
    
    # ========================================================================
    # –ó–ê–ü–†–û–° –ö LLM
    # ========================================================================
    
    async def _request_batch_variants(self, words_list: List[str]) -> Optional[str]:
        """
        Batch-–∑–∞–ø—Ä–æ—Å –∫ OpenRouter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        
        Args:
            words_list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            JSON —Å—Ç—Ä–æ–∫–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            user_prompt = get_variant_generation_batch_prompt(words_list)
            
            logger.debug(f"üìù –ü—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–∞: {len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.debug(f"üìù –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–∞: {user_prompt[:200]}...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º messages –¥–ª—è chat_completion
            messages = [
                {
                    "role": "system",
                    "content": VARIANT_GENERATION_SYSTEM_PROMPT
                },
                {
                    "role": "user",
                    "content": user_prompt
                }
            ]
            
            # –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
            logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ {VARIANT_GENERATION_MODEL}...")
            response = await self.client.chat_completion(
                messages=messages,
                model=VARIANT_GENERATION_MODEL,
                temperature=0.7,
                max_tokens=1000 + len(words_list) * 100  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
            )
            
            logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
            logger.info(f"üìÑ API –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):\n{response[:300]}")
            return response
        
        except Exception as e:
            error_msg = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ batch-–∑–∞–ø—Ä–æ—Å–µ: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ 403 (–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω)
            if "403" in error_msg:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 403 –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å {VARIANT_GENERATION_MODEL}")
                logger.warning(f"   –ü—Ä–æ–±—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –º–æ–¥–µ–ª—å: {VARIANT_GENERATION_MODEL}")
                
                # –ü—Ä–æ–±—É–µ–º fallback –º–æ–¥–µ–ª—å
                from config.models import FALLBACK_MODEL
                logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –º–æ–¥–µ–ª—å {FALLBACK_MODEL}...")
                
                try:
                    response = await self.client.chat_completion(
                        messages=messages,
                        model=FALLBACK_MODEL,
                        temperature=0.7,
                        max_tokens=1000 + len(words_list) * 100
                    )
                    logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    return response
                
                except Exception as fallback_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –º–æ–¥–µ–ª–∏: {fallback_error}")
                    logger.info(f"üîÑ –ü—Ä–æ–±—É—é –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è {len(words_list)} —Å–ª–æ–≤...")
                    # –ü–æ—Å–ª–µ–¥–Ω–∏–π resort - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                    return None
            
            return None
    
    # ========================================================================
    # –ü–ê–†–°–ò–ù–ì –ò –í–ê–õ–ò–î–ê–¶–ò–Ø
    # ========================================================================
    
    def _parse_and_validate_batch_response(
        self,
        response_text: str,
        words_list: List[str]
    ) -> Tuple[Dict, List[str]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è batch-–æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
        
        Args:
            response_text: JSON —Ç–µ–∫—Å—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            words_list: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
            
        Returns:
            (—É—Å–ø–µ—à–Ω—ã–µ_–≤–∞—Ä–∏–∞–Ω—Ç—ã: {—Å–ª–æ–≤–æ: [...]}, –æ—à–∏–±–∫–∏: [—Å–ª–æ–≤–∞])
        """
        parsed_variants = {}
        error_words = []
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ JSON
            logger.debug(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞...")
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ (–∏–Ω–æ–≥–¥–∞ LLM –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥)
            json_text = self._extract_json_from_response(response_text)
            response_dict = json.loads(json_text)
            
            logger.debug(f"‚úÖ JSON —Å–ø–∞—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: {len(response_dict)}")
        
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            logger.debug(f"   –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {response_text[:500]}")
            return {}, words_list
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {}, words_list
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
        for word in words_list:
            if word not in response_dict:
                logger.warning(f"‚ö†Ô∏è –°–ª–æ–≤–æ '{word}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ LLM")
                error_words.append(word)
                continue
            
            variants_list = response_dict[word]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            if not isinstance(variants_list, list):
                logger.warning(f"‚ö†Ô∏è –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è '{word}' –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {type(variants_list)}")
                error_words.append(word)
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            if len(variants_list) != VARIANTS_COUNT:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è '{word}': {len(variants_list)}, –æ–∂–∏–¥–∞–µ—Ç—Å—è {VARIANTS_COUNT}")
                error_words.append(word)
                continue
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            try:
                for variant in variants_list:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    if not isinstance(variant, str):
                        raise ValueError(f"–í–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: {type(variant)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
                    if variant.lower() == word.lower():
                        raise ValueError(f"–í–∞—Ä–∏–∞–Ω—Ç '{variant}' —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
                    if not is_russian_word(variant):
                        raise ValueError(f"–í–∞—Ä–∏–∞–Ω—Ç '{variant}' —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ-—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã")
                
                # –í–∞—Ä–∏–∞–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã
                parsed_variants[word] = variants_list
                logger.debug(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è '{word}' –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã")
            
            except ValueError as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è '{word}': {e}")
                error_words.append(word)
                continue
        
        return parsed_variants, error_words
    
    def _extract_json_from_response(self, text: str) -> str:
        """
        –ò–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (LLM –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥)
        
        Args:
            text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            JSON —Å—Ç—Ä–æ–∫–∞
        """
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π { –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π }
        start = text.find('{')
        end = text.rfind('}')
        
        if start == -1 or end == -1:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü–∞ JSON –≤ –æ—Ç–≤–µ—Ç–µ")
            raise ValueError("JSON not found in response")
        
        json_text = text[start:end+1]
        logger.debug(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω JSON ({len(json_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return json_text
    
    # ========================================================================
    # FALLBACK –ì–ï–ù–ï–†–ê–¶–ò–Ø
    # ========================================================================
    
    async def _fallback_generation_for_failed_words(self, failed_words: List[str]):
        """
        Fallback: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
        
        Args:
            failed_words: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —É–¥–∞–ª–∞—Å—å batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        """
        logger.warning(
            f"‚ö†Ô∏è Fallback-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è {len(failed_words)} —Å–ª–æ–≤: {failed_words[:3]}..."
        )
        
        for word in failed_words:
            try:
                # –ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞
                variants = await self.generate_variants_single(word)
                if variants:
                    logger.info(f"‚úÖ Fallback-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è '{word}'")
                else:
                    logger.warning(f"‚ö†Ô∏è Fallback-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è '{word}'")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                    variants = self._algorithmic_generation(word)
                    if variants:
                        logger.info(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è '{word}'")
            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –¥–ª—è '{word}': {e}")
    
    async def generate_variants_single(self, word: str) -> Optional[List[str]]:
        """
        Fallback: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        
        Args:
            word: –°–ª–æ–≤–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑ 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ None
        """
        try:
            logger.info(f"üìù Fallback-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è —Å–ª–æ–≤–∞ '{word}'")
            
            user_prompt = get_variant_generation_single_prompt(word)
            messages = [
                {
                    "role": "system",
                    "content": VARIANT_GENERATION_SYSTEM_PROMPT
                },
                {
                    "role": "user",
                    "content": user_prompt
                }
            ]
            
            response = await self.client.chat_completion(
                messages=messages,
                model=VARIANT_GENERATION_MODEL,
                temperature=0.7,
                max_tokens=500
            )
            
            # –ü–∞—Ä—Å–∏–º JSON
            json_text = self._extract_json_from_response(response)
            variants_list = json.loads(json_text)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–∑ 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if not isinstance(variants_list, list):
                logger.warning(f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –ø–æ–ª—É—á–µ–Ω–æ: {type(variants_list)}")
                return None
            
            if len(variants_list) != VARIANTS_COUNT:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(variants_list)}, –æ–∂–∏–¥–∞–µ—Ç—Å—è {VARIANTS_COUNT}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            for variant in variants_list:
                if not isinstance(variant, str):
                    logger.warning(f"‚ö†Ô∏è –í–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π: {type(variant)}")
                    return None
                if variant.lower() == word.lower():
                    logger.warning(f"‚ö†Ô∏è –í–∞—Ä–∏–∞–Ω—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º: {variant}")
                    return None
                if not is_russian_word(variant):
                    logger.warning(f"‚ö†Ô∏è –í–∞—Ä–∏–∞–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ-—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã: {variant}")
                    return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self._save_variants_to_cache(word, variants_list)
            logger.info(f"‚úÖ Fallback-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è '{word}': {variants_list}")
            
            return variants_list
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è '{word}': {e}")
            return None
    
    def _algorithmic_generation(self, word: str) -> Optional[List[str]]:
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–±–µ–∑ API)
        
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å 7 —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –∑–∞–º–µ–Ω—ã –±—É–∫–≤
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç 3 —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞
        
        Args:
            word: –°–ª–æ–≤–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑ 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ None
        """
        logger.info(f"üîß –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è '{word}'")
        
        try:
            word_lower = word.lower()
            variants = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            
            # –°–¢–†–ê–¢–ï–ì–ò–Ø 1: –ó–∞–º–µ–Ω–∞ –±–µ–∑—É–¥–∞—Ä–Ω–æ–π –≥–ª–∞—Å–Ω–æ–π (–æ‚Üí–∞, –µ‚Üí–∏, —è‚Üí–µ, –∏‚Üí–µ)
            for old, new in [('–æ', '–∞'), ('–∞', '–æ'), ('–µ', '–∏'), ('–∏', '–µ'), ('—è', '–µ'), ('—é', '—é')]:
                idx = word_lower.find(old)
                if idx != -1:
                    variant = word_lower[:idx] + new + word_lower[idx+1:]
                    if variant != word_lower:
                        variants.add(variant)
                        if len(variants) >= VARIANTS_COUNT:
                            break
            
            if len(variants) >= VARIANTS_COUNT:
                result = [v.capitalize() for v in list(variants)[:VARIANTS_COUNT]]
                self._save_variants_to_cache(word, result)
                logger.info(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è '{word}': {result}")
                return result
            
            # –°–¢–†–ê–¢–ï–ì–ò–Ø 2: –ó–∞–º–µ–Ω–∞ –ø–∞—Ä–Ω–æ–π —Å–æ–≥–ª–∞—Å–Ω–æ–π (–¥‚Üî—Ç, –±‚Üî–ø, –≥‚Üî–∫, –≤‚Üî—Ñ, –∂‚Üî—à, –∑‚Üî—Å)
            consonant_pairs = [('–¥', '—Ç'), ('—Ç', '–¥'), ('–±', '–ø'), ('–ø', '–±'), 
                              ('–≥', '–∫'), ('–∫', '–≥'), ('–≤', '—Ñ'), ('—Ñ', '–≤'), 
                              ('–∂', '—à'), ('—à', '–∂'), ('–∑', '—Å'), ('—Å', '–∑')]
            
            for old, new in consonant_pairs:
                idx = word_lower.find(old)
                if idx != -1:
                    variant = word_lower[:idx] + new + word_lower[idx+1:]
                    if variant != word_lower:
                        variants.add(variant)
                        if len(variants) >= VARIANTS_COUNT:
                            break
            
            if len(variants) >= VARIANTS_COUNT:
                result = [v.capitalize() for v in list(variants)[:VARIANTS_COUNT]]
                self._save_variants_to_cache(word, result)
                logger.info(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è '{word}': {result}")
                return result
            
            # –°–¢–†–ê–¢–ï–ì–ò–Ø 3: –£–¥–≤–æ–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ–π (–∫‚Üí–∫–∫, —Ä‚Üí—Ä—Ä, –ª‚Üí–ª–ª, –Ω‚Üí–Ω–Ω, –º‚Üí–º–º)
            for char in '–∫—Ä–ª–Ω–º—Å—Ç–±–ø–≤–≥–¥–∂–∑—à—â':
                idx = word_lower.find(char)
                if idx != -1 and idx > 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –µ—â–µ –Ω–µ —É–¥–≤–æ–µ–Ω–Ω–∞—è —Å–æ–≥–ª–∞—Å–Ω–∞—è
                    if idx + 1 < len(word_lower) and word_lower[idx + 1] != char:
                        variant = word_lower[:idx+1] + char + word_lower[idx+1:]
                        if variant != word_lower:
                            variants.add(variant)
                            if len(variants) >= VARIANTS_COUNT:
                                break
            
            if len(variants) >= VARIANTS_COUNT:
                result = [v.capitalize() for v in list(variants)[:VARIANTS_COUNT]]
                self._save_variants_to_cache(word, result)
                logger.info(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è '{word}': {result}")
                return result
            
            # –°–¢–†–ê–¢–ï–ì–ò–Ø 4: –ü—Ä–æ–ø—É—Å–∫ –≥–ª–∞—Å–Ω–æ–π (—É–±–∏—Ä–∞–µ–º –≥–ª–∞—Å–Ω—É—é)
            for i, char in enumerate(word_lower):
                if char in '–∞–µ–∏–æ—É—é—è—ë':
                    variant = word_lower[:i] + word_lower[i+1:]
                    if variant and variant != word_lower:
                        variants.add(variant)
                        if len(variants) >= VARIANTS_COUNT:
                            break
            
            if len(variants) >= VARIANTS_COUNT:
                result = [v.capitalize() for v in list(variants)[:VARIANTS_COUNT]]
                self._save_variants_to_cache(word, result)
                logger.info(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è '{word}': {result}")
                return result
            
            # –°–¢–†–ê–¢–ï–ì–ò–Ø 5: –ü—Ä–æ–ø—É—Å–∫ —Å–æ–≥–ª–∞—Å–Ω–æ–π (—É–±–∏—Ä–∞–µ–º —Å–æ–≥–ª–∞—Å–Ω—É—é)
            for i, char in enumerate(word_lower):
                if char in '–±–≤–≥–¥–∂–∑–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â' and i < len(word_lower) - 1:
                    variant = word_lower[:i] + word_lower[i+1:]
                    if variant != word_lower:
                        variants.add(variant)
                        if len(variants) >= VARIANTS_COUNT:
                            break
            
            if len(variants) >= VARIANTS_COUNT:
                result = [v.capitalize() for v in list(variants)[:VARIANTS_COUNT]]
                self._save_variants_to_cache(word, result)
                logger.info(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è '{word}': {result}")
                return result
            
            # –°–¢–†–ê–¢–ï–ì–ò–Ø 6: –¢—Ä–∞–Ω—Å–ø–æ–∑–∏—Ü–∏—è (–ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä—è–¥–æ–º —Å—Ç–æ—è—â–∏—Ö –±—É–∫–≤)
            for i in range(len(word_lower) - 1):
                if word_lower[i] != word_lower[i+1]:
                    variant = word_lower[:i] + word_lower[i+1] + word_lower[i] + word_lower[i+2:]
                    if variant != word_lower:
                        variants.add(variant)
                        if len(variants) >= VARIANTS_COUNT:
                            break
            
            if len(variants) >= VARIANTS_COUNT:
                result = [v.capitalize() for v in list(variants)[:VARIANTS_COUNT]]
                self._save_variants_to_cache(word, result)
                logger.info(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è '{word}': {result}")
                return result
            
            # –°–¢–†–ê–¢–ï–ì–ò–Ø 7: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞—Å–Ω–æ–π
            for i in range(len(word_lower) + 1):
                for vowel in '–∞–µ–∏–æ—É':
                    variant = word_lower[:i] + vowel + word_lower[i:]
                    if variant != word_lower and len(variant) <= len(word_lower) + 2:
                        variants.add(variant)
                        if len(variants) >= VARIANTS_COUNT:
                            break
                if len(variants) >= VARIANTS_COUNT:
                    break
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            result = [v.capitalize() for v in list(variants)[:VARIANTS_COUNT]]
            
            if len(result) >= VARIANTS_COUNT:
                self._save_variants_to_cache(word, result)
                logger.info(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è '{word}': {result}")
                return result
            else:
                logger.warning(f"‚ö†Ô∏è –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–ª–∞ —Ç–æ–ª—å–∫–æ {len(result)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è '{word}'")
                return None
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è '{word}': {e}")
            return None
    
    # ========================================================================
    # –ö–≠–®–ò–†–û–í–ê–ù–ò–ï
    # ========================================================================
    
    def _load_cached_variants(self, words_list: List[str]) -> Dict[str, Dict]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–ª–æ–≤ –∏–∑ –∫—ç—à–∞
        
        Args:
            words_list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {—Å–ª–æ–≤–æ: {easy: [...], medium: [...], hard: [...]}}
        """
        cached = {}
        
        for word in words_list:
            variants = self.get_cached_variants(word)
            if variants:
                cached[word] = variants
        
        return cached
    
    def get_cached_variants(self, word: str) -> Optional[List[str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–≤–∞ –∏–∑ –∫—ç—à–∞
        
        Args:
            word: –°–ª–æ–≤–æ
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑ 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ None
        """
        word_hash = get_word_hash(word)
        cache_file = self.cache_dir / f"{word_hash}.json"
        
        if not cache_file.exists():
            return None
        
        try:
            data = load_json(cache_file)
            if data and "variants" in data:
                logger.debug(f"üìñ –í–∞—Ä–∏–∞–Ω—Ç—ã '{word}' –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞")
                return data["variants"]
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—ç—à–∞ –¥–ª—è '{word}': {e}")
        
        return None
    
    def get_all_variants(self, word: str) -> Optional[List[str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —Å–ª–æ–≤–∞
        
        Args:
            word: –°–ª–æ–≤–æ
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑ 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ None
        """
        variants = self.get_cached_variants(word)
        if not variants:
            logger.error(f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ")
            return None
        
        logger.debug(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω—ã 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è '{word}'")
        return variants
    
    def _save_variants_to_cache(self, word: str, variants_dict: Dict) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–≤–∞ –≤ –∫—ç—à
        
        Args:
            word: –°–ª–æ–≤–æ
            variants_dict: –°–ø–∏—Å–æ–∫ –∏–∑ 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            word_hash = get_word_hash(word)
            cache_file = self.cache_dir / f"{word_hash}.json"
            
            from datetime import datetime
            cache_data = {
                "word": word,
                "word_hash": word_hash,
                "generated_at": datetime.now().isoformat(),
                "variants": variants_dict
            }
            
            if save_json(cache_file, cache_data):
                logger.debug(f"üíæ –í–∞—Ä–∏–∞–Ω—Ç—ã '{word}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞ –¥–ª—è '{word}'")
                return False
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∫—ç—à: {e}")
            return False
