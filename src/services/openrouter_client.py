"""
OpenRouter API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Vision, TTS –∏ LLM APIs
"""

import base64
import logging
import asyncio
from typing import Optional, Dict, Any, List
import httpx

from config.settings import OPENROUTER_API_KEY
from config.models import (
    VISION_MODEL,
    OPENROUTER_API_URL,
    OPENROUTER_API_TIMEOUT,
    OPENROUTER_MAX_RETRIES,
)


logger = logging.getLogger(__name__)


class OpenRouterClient:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API
    """
    
    def __init__(self, api_key: str = OPENROUTER_API_KEY):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è OpenRouter
        """
        self.api_key = api_key
        self.base_url = OPENROUTER_API_URL
        self.timeout = OPENROUTER_API_TIMEOUT
        self.max_retries = OPENROUTER_MAX_RETRIES
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
        if not self.api_key:
            logger.error("‚ùå OpenRouter API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            raise ValueError("OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        logger.info(f"‚úÖ OpenRouterClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∫–ª—é—á: {self.api_key[:10]}...)")
    
    async def vision_request(
        self,
        image_base64: str,
        prompt: str,
        model: Optional[str] = None
    ) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            image_base64: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
            prompt: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
            model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è VISION_MODEL)
            
        Returns:
            –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ API
        """
        if not model:
            model = VISION_MODEL
        
        logger.info(f"üì∏ Vision –∑–∞–ø—Ä–æ—Å: –º–æ–¥–µ–ª—å {model}")
        
        payload = {
            "model": model,
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": prompt
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{image_base64}"
                            }
                        }
                    ]
                }
            ],
            "max_tokens": 1024,
        }
        
        response = await self._make_request(
            endpoint="/chat/completions",
            payload=payload,
            method="POST"
        )
        
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            content = response["choices"][0]["message"]["content"]
            logger.info(f"‚úÖ Vision API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
            logger.debug(f"üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ Vision API:\n{content}")
            return content
        except (KeyError, IndexError, TypeError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Vision API: {e}")
            logger.debug(f"–û—Ç–≤–µ—Ç: {response}")
            raise ValueError(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç Vision API: {e}")
    
    async def chat_completion(
        self,
        messages: List[Dict[str, str]],
        model: Optional[str] = None,
        temperature: float = 0.7,
        max_tokens: int = 2048
    ) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI
            model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0-1)
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        logger.info(f"üí¨ Chat completion –∑–∞–ø—Ä–æ—Å: –º–æ–¥–µ–ª—å {model}")
        
        payload = {
            "model": model,
            "messages": messages,
            "temperature": temperature,
            "max_tokens": max_tokens,
        }
        
        response = await self._make_request(
            endpoint="/chat/completions",
            payload=payload,
            method="POST"
        )
        
        try:
            content = response["choices"][0]["message"]["content"]
            logger.info(f"‚úÖ Chat completion –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
            return content
        except (KeyError, IndexError, TypeError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Chat completion: {e}")
            raise ValueError(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}")
    
    async def _make_request(
        self,
        endpoint: str,
        payload: Dict[str, Any],
        method: str = "POST"
    ) -> Dict[str, Any]:
        """
        –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenRouter
        
        Args:
            endpoint: –ü—É—Ç—å –∫ API endpoint (/chat/completions, /audio/speech, etc.)
            payload: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            method: HTTP –º–µ—Ç–æ–¥ (POST, GET, etc.)
            
        Returns:
            –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON –æ—Ç–≤–µ—Ç
            
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ API –∏–ª–∏ rate limit
        """
        url = f"{self.base_url}{endpoint}"
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
        }
        
        for attempt in range(self.max_retries):
            try:
                logger.debug(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}: {method} {url}")
                
                async with httpx.AsyncClient(timeout=self.timeout) as client:
                    if method == "POST":
                        response = await client.post(url, json=payload, headers=headers)
                    elif method == "GET":
                        response = await client.get(url, headers=headers)
                    else:
                        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
                if response.status_code == 200:
                    logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (—Å—Ç–∞—Ç—É—Å 200)")
                    return response.json()
                
                elif response.status_code == 429:  # Rate limit
                    logger.warning(f"‚ö†Ô∏è Rate limit (429). –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}")
                    if attempt < self.max_retries - 1:
                        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                        wait_time = (2 ** attempt) * 5  # 5, 10, 20, 40 —Å–µ–∫—É–Ω–¥
                        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º...")
                        await asyncio.sleep(wait_time)
                        continue
                    else:
                        raise RuntimeError(f"Rate limit –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                
                elif response.status_code == 401:
                    logger.error(f"‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (401) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")
                    raise RuntimeError("API –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                elif response.status_code == 400:
                    error_detail = response.text
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ (400): {error_detail}")
                    raise RuntimeError(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {error_detail}")
                
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    logger.error(f"–û—Ç–≤–µ—Ç: {response.text}")
                    raise RuntimeError(f"API –æ—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            except asyncio.TimeoutError:
                logger.warning(f"‚è±Ô∏è Timeout –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}/{self.max_retries}")
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(2 ** attempt)
                    continue
                else:
                    raise RuntimeError(f"Timeout –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
            
            except httpx.RequestError as e:
                logger.warning(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}/{self.max_retries}: {e}")
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(2 ** attempt)
                    continue
                else:
                    raise RuntimeError(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
        
        raise RuntimeError(f"–ó–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
