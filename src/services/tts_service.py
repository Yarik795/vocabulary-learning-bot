"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ (Text-to-Speech) —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö —Å–ª–æ–≤
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å gTTS (Google Text-to-Speech) + –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
"""

import logging
import hashlib
from pathlib import Path
from typing import Optional
import asyncio
import tempfile

from config.settings import AUDIO_CACHE_DIR
from config.models import TTS_MODEL_CONFIG
from gtts import gTTS

logger = logging.getLogger(__name__)

MAX_AUDIO_SIZE = 10 * 1024 * 1024 # 10 MB


class TTSService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Å–ª–æ–≤
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS —Å–µ—Ä–≤–∏—Å–∞ —Å gTTS
        """
        self.cache_dir = AUDIO_CACHE_DIR
        self.lang = TTS_MODEL_CONFIG.get("voice", "ru")  # –Ø–∑—ã–∫ –¥–ª—è gTTS
        self.slow = TTS_MODEL_CONFIG.get("slow", False)  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∫—ç—à–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.cache_dir.mkdir(parents=True, exist_ok=True)
        logger.info(f"‚úÖ TTSService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—è–∑—ã–∫: {self.lang}, –∫—ç—à: {self.cache_dir})")
    
    def _get_word_hash(self, word: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∫—ç—à–∞
        
        Args:
            word: –°–ª–æ–≤–∞—Ä–Ω–æ–µ —Å–ª–æ–≤–æ
            
        Returns:
            –•–µ—à —Å–ª–æ–≤–∞ (8 –ø–µ—Ä–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
        """
        word_lower = word.lower().strip()
        word_hash = hashlib.md5(word_lower.encode()).hexdigest()[:8]
        return word_hash
    
    def _get_cache_path(self, word: str) -> Path:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞ –¥–ª—è —Å–ª–æ–≤–∞
        
        Args:
            word: –°–ª–æ–≤–∞—Ä–Ω–æ–µ —Å–ª–æ–≤–æ
            
        Returns:
            –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞
        """
        word_hash = self._get_word_hash(word)
        return self.cache_dir / f"{word_hash}.mp3"
    
    def get_cached_audio(self, word: str) -> Optional[bytes]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        Args:
            word: –°–ª–æ–≤–∞—Ä–Ω–æ–µ —Å–ª–æ–≤–æ
            
        Returns:
            –ê—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ bytes –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ
        """
        cache_path = self._get_cache_path(word)
        
        if cache_path.exists():
            try:
                audio_bytes = cache_path.read_bytes()
                logger.info(f"üì¶ –ê—É–¥–∏–æ –¥–ª—è '{word}' –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫—ç—à–∞ ({len(audio_bytes)} –±–∞–π—Ç)")
                return audio_bytes
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫—ç—à–∞ –¥–ª—è '{word}': {e}")
                return None
        
        logger.debug(f"üì≠ –ê—É–¥–∏–æ –¥–ª—è '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ")
        return None
    
    def save_to_cache(self, word: str, audio_bytes: bytes) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ –≤ –∫—ç—à
        
        Args:
            word: –°–ª–æ–≤–∞—Ä–Ω–æ–µ —Å–ª–æ–≤–æ
            audio_bytes: –ê—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ bytes
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        cache_path = self._get_cache_path(word)
        
        if len(audio_bytes) > MAX_AUDIO_SIZE:
            logger.warning(f"‚ö†Ô∏è –ê—É–¥–∏–æ –¥–ª—è '{word}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({len(audio_bytes)} –±–∞–π—Ç), –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            return False

        try:
            cache_path.write_bytes(audio_bytes)
            logger.info(f"üíæ –ê—É–¥–∏–æ –¥–ª—è '{word}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à ({len(audio_bytes)} –±–∞–π—Ç)")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ –≤ –∫—ç—à –¥–ª—è '{word}': {e}")
            return False
    
    async def generate_audio(self, word: str) -> Optional[bytes]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–ª—è —Å–ª–æ–≤–∞
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ - –µ—Å–ª–∏ –µ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
        2. –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ gTTS
        3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
        4. –í–æ–∑–≤—Ä–∞—Ç –∞—É–¥–∏–æ
        
        Args:
            word: –°–ª–æ–≤–∞—Ä–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            
        Returns:
            –ê—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ bytes –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        logger.info(f"üîä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è —Å–ª–æ–≤–∞ '{word}'")
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        cached_audio = self.get_cached_audio(word)
        if cached_audio:
            return cached_audio
        
        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ gTTS
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è MP3 —Å gTTS
            with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as tmp_file:
                tmp_path = tmp_file.name
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ gTTS
                tts = gTTS(text=word, lang=self.lang, slow=self.slow)
                tts.save(tmp_path)
                
                # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                audio_bytes = Path(tmp_path).read_bytes()
                
                # –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
                self.save_to_cache(word, audio_bytes)
                
                logger.info(f"‚úÖ –ê—É–¥–∏–æ –¥–ª—è '{word}' —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ({len(audio_bytes)} –±–∞–π—Ç)")
                return audio_bytes
            
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_path_obj = Path(tmp_path)
                if temp_path_obj.exists():
                    temp_path_obj.unlink()
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è '{word}': {e}")
            return None
    
    async def batch_generate_audio(self, words: list) -> dict:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
        –°–ª–æ–≤–∞ –∏–∑ –∫—ç—à–∞ –ø–æ–ª—É—á–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–±—ã—Å—Ç—Ä–æ), –Ω–æ –Ω–æ–≤—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        
        Args:
            words: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {—Å–ª–æ–≤–æ: –∞—É–¥–∏–æ_bytes –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ}
        """
        logger.info(f"üîä Batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è {len(words)} —Å–ª–æ–≤ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)")
        
        results = {}
        cached_count = 0
        words_to_generate = []  # –°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
        words_positions = {}  # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–æ–≤–∞
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–≤
        for word in words:
            cached_audio = self.get_cached_audio(word)
            if cached_audio:
                results[word] = cached_audio
                cached_count += 1
            else:
                words_to_generate.append(word)
                words_positions[word] = len(results)
        
        logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: {cached_count}, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {len(words_to_generate)}")
        
        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∞—É–¥–∏–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        if words_to_generate:
            generate_tasks = [
                self.generate_audio(word) for word in words_to_generate
            ]
            generated_audios = await asyncio.gather(*generate_tasks, return_exceptions=True)
            
            generated_count = 0
            failed_count = 0
            
            for word, audio in zip(words_to_generate, generated_audios):
                if isinstance(audio, Exception):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è '{word}': {audio}")
                    results[word] = None
                    failed_count += 1
                elif audio is not None:
                    results[word] = audio
                    generated_count += 1
                else:
                    results[word] = None
                    failed_count += 1
        else:
            generated_count = 0
            failed_count = 0
        
        logger.info(
            f"‚úÖ Batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
            f"{generated_count} –Ω–æ–≤—ã—Ö, "
            f"{cached_count} –∏–∑ –∫—ç—à–∞, "
            f"{failed_count} –æ—à–∏–±–æ–∫"
        )
        
        return results
    
    def clear_cache(self) -> bool:
        """
        –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à –∞—É–¥–∏–æ
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            import shutil
            shutil.rmtree(self.cache_dir)
            self.cache_dir.mkdir(parents=True, exist_ok=True)
            logger.info(f"‚úÖ –ö—ç—à –∞—É–¥–∏–æ –æ—á–∏—â–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
            return False
    
    def get_cache_info(self) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫—ç—à–µ
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—ç—à–µ
        """
        if not self.cache_dir.exists():
            return {"total_files": 0, "total_size_mb": 0}
        
        total_files = len(list(self.cache_dir.glob("*.mp3")))
        total_size = sum(f.stat().st_size for f in self.cache_dir.glob("*.mp3"))
        
        return {
            "total_files": total_files,
            "total_size_mb": round(total_size / (1024 * 1024), 2),
            "cache_dir": str(self.cache_dir)
        }
