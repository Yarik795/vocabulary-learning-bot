"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenRouter API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ API –∏ –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
"""

import asyncio
import logging
from pathlib import Path

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
import sys
sys.path.insert(0, str(Path(__file__).parent))

from src.services.variant_generator_service import VariantGeneratorService
from src.utils.file_helpers import load_json
import shutil


async def test_api_batch_generation():
    """–¢–µ—Å—Ç batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenRouter API"""
    logger.info("=" * 80)
    logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BATCH-–ì–ï–ù–ï–†–ê–¶–ò–ò –ß–ï–†–ï–ó OpenRouter API")
    logger.info("=" * 80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    service = VariantGeneratorService()
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–Ω–µ–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã
    test_words = ["–≤–∞–≥–æ–Ω", "–≤–æ–∫–∑–∞–ª", "–≤—á–µ—Ä–∞"]
    
    logger.info(f"\nüìù –°–ª–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {test_words}")
    logger.info(f"üìç –ö—ç—à –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {service.cache_dir}")
    
    # –®–ê–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
    logger.info("\n" + "=" * 80)
    logger.info("–®–ê–ì 1: –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º (—á—Ç–æ–±—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å API –∑–∞–ø—Ä–æ—Å)")
    logger.info("=" * 80)
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö —Å–ª–æ–≤
    from src.utils.word_helpers import get_word_hash
    
    cleared_count = 0
    for word in test_words:
        word_hash = get_word_hash(word)
        cache_file = service.cache_dir / f"{word_hash}.json"
        if cache_file.exists():
            cache_file.unlink()
            cleared_count += 1
            logger.info(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω –∫—ç—à –¥–ª—è '{word}'")
    
    if cleared_count == 0:
        logger.info(f"   ‚ÑπÔ∏è  –ö—ç—à –¥–ª—è —ç—Ç–∏—Ö —Å–ª–æ–≤ —É–∂–µ –±—ã–ª –ø—É—Å—Ç")
    else:
        logger.info(f"   ‚úÖ –û—á–∏—â–µ–Ω–æ {cleared_count} —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞")
    
    # –®–ê–ì 2: –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–∞
    logger.info("\n" + "=" * 80)
    logger.info("–®–ê–ì 2: –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç API –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ –∫—ç—à–∞)")
    logger.info("=" * 80)
    
    logger.info(f"\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é batch-–∑–∞–ø—Ä–æ—Å –¥–ª—è {len(test_words)} —Å–ª–æ–≤...")
    logger.info(f"   –°–ª–æ–≤–∞: {test_words}")
    
    # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    result = await service.generate_variants_batch(test_words)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logger.info(f"\n‚úÖ –û—Ç–≤–µ—Ç –æ—Ç API –ø–æ–ª—É—á–µ–Ω:")
    logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: {len(result)}")
    
    for word in test_words:
        if word in result:
            variants = result[word]
            logger.info(f"   {word:15} ‚Üí {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {variants}")
        else:
            logger.warning(f"   {word:15} ‚Üí ‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ –æ—Ç–≤–µ—Ç–µ")
    
    # –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞ API
    logger.info("\n" + "=" * 80)
    logger.info("–®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê API –û–¢–í–ï–¢–ê")
    logger.info("=" * 80)
    
    api_success_count = 0
    api_errors = []
    
    for word in test_words:
        if word not in result:
            api_errors.append(f"{word}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
            continue
        
        variants = result[word]
        logger.info(f"\nüìÑ –°–ª–æ–≤–æ: '{word}'")
        logger.info(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {variants}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
        checks = {
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ == 3": len(variants) == 3,
            "–í—Å–µ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏": all(isinstance(v, str) for v in variants),
            "–í—Å–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞": all(v != word for v in variants),
            "–í—Å–µ –Ω–µ –ø—É—Å—Ç—ã–µ": all(len(v) > 0 for v in variants),
            "–ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã": all(v[0].isupper() or v[0].isdigit() for v in variants)
        }
        
        all_good = all(checks.values())
        
        for check_name, passed in checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            logger.info(f"   {status} {check_name}")
        
        if all_good:
            logger.info(f"   üéâ –ö–∞—á–µ—Å—Ç–≤–æ: –û–¢–õ–ò–ß–ù–û")
            api_success_count += 1
        else:
            logger.warning(f"   ‚ö†Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ: –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")
            for check_name, passed in checks.items():
                if not passed:
                    api_errors.append(f"{word}: {check_name}")
    
    # –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
    logger.info("\n" + "=" * 80)
    logger.info("–®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –ß–¢–û –í–ê–†–ò–ê–ù–¢–´ –ë–´–õ–ò –°–û–•–†–ê–ù–ï–ù–´ –í –ö–≠–®")
    logger.info("=" * 80)
    
    cache_verified_count = 0
    for word in test_words:
        if word in result:
            word_hash = get_word_hash(word)
            cache_file = service.cache_dir / f"{word_hash}.json"
            
            if cache_file.exists():
                cached_data = load_json(cache_file)
                if cached_data and "variants" in cached_data:
                    cached_variants = cached_data["variants"]
                    api_variants = result[word]
                    
                    if cached_variants == api_variants:
                        logger.info(f"   ‚úÖ '{word}': –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        cache_verified_count += 1
                    else:
                        logger.warning(f"   ‚ö†Ô∏è  '{word}': –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –∫—ç—à–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç API")
                        logger.warning(f"      API: {api_variants}")
                        logger.warning(f"      –ö—ç—à: {cached_variants}")
                else:
                    logger.warning(f"   ‚ö†Ô∏è  '{word}': –∫—ç—à —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'variants'")
            else:
                logger.warning(f"   ‚ö†Ô∏è  '{word}': –∫—ç—à —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    # –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
    logger.info("\n" + "=" * 80)
    logger.info("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ API –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 80)
    
    total_words = len(test_words)
    
    logger.info(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    logger.info(f"   –í—Å–µ–≥–æ —Å–ª–æ–≤: {total_words}")
    logger.info(f"   –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç API: {len(result)} —Å–ª–æ–≤")
    logger.info(f"   –£—Å–ø–µ—à–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {api_success_count}/{total_words}")
    logger.info(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: {cache_verified_count}/{total_words}")
    
    if api_errors:
        logger.warning(f"\n   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫:")
        for error in api_errors:
            logger.warning(f"      - {error}")
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    success_rate = (api_success_count / total_words * 100) if total_words > 0 else 0
    
    logger.info(f"\n   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    if success_rate == 100:
        logger.info("   üéâ API –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û! –í–°–ï –°–õ–û–í–ê –û–ë–†–ê–ë–û–¢–ê–ù–´ –ö–û–†–†–ï–ö–¢–ù–û!")
    elif success_rate >= 80:
        logger.warning(f"   ‚ö†Ô∏è  API —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç ({success_rate:.0f}%)")
    else:
        logger.error(f"   ‚ùå API –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã! –£—Å–ø–µ—Ö —Ç–æ–ª—å–∫–æ {success_rate:.0f}%")
    
    logger.info("=" * 80 + "\n")
    
    return api_success_count == total_words


async def test_single_word_fallback():
    """–¢–µ—Å—Ç fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
    logger.info("=" * 80)
    logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FALLBACK –ì–ï–ù–ï–†–ê–¶–ò–ò (–¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞)")
    logger.info("=" * 80)
    
    service = VariantGeneratorService()
    
    test_word = "–≤–∞–≥–æ–Ω"
    
    logger.info(f"\nüìù –°–ª–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: '{test_word}'")
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à
    from src.utils.word_helpers import get_word_hash
    word_hash = get_word_hash(test_word)
    cache_file = service.cache_dir / f"{word_hash}.json"
    if cache_file.exists():
        cache_file.unlink()
        logger.info(f"   üóëÔ∏è  –û—á–∏—â–µ–Ω –∫—ç—à –¥–ª—è '{test_word}'")
    
    logger.info(f"\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é fallback-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞...")
    
    variants = await service.generate_variants_single(test_word)
    
    if variants:
        logger.info(f"‚úÖ Fallback —É—Å–ø–µ—à–µ–Ω!")
        logger.info(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {variants}")
        logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(variants)}")
        
        if len(variants) == 3:
            logger.info(f"   üéâ –†–æ–≤–Ω–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ - –û–¢–õ–ò–ß–ù–û!")
            return True
        else:
            logger.warning(f"   ‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(variants)} –≤–º–µ—Å—Ç–æ 3")
            return False
    else:
        logger.error(f"‚ùå Fallback –≤–µ—Ä–Ω—É–ª None")
        return False


if __name__ == "__main__":
    async def main():
        # –¢–µ—Å—Ç 1: API batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        api_success = await test_api_batch_generation()
        
        # –¢–µ—Å—Ç 2: Fallback –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        logger.info("\n")
        fallback_success = await test_single_word_fallback()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("\n" + "=" * 80)
        logger.info("üèÅ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –í–°–ï–• –¢–ï–°–¢–û–í")
        logger.info("=" * 80)
        
        if api_success and fallback_success:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        else:
            logger.warning("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            if not api_success:
                logger.warning("   - API batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã")
            if not fallback_success:
                logger.warning("   - Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã")
        
        logger.info("=" * 80 + "\n")
    
    asyncio.run(main())
